/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/app/v1alpha1/module.proto */

#ifndef PROTOBUF_C_cosmos_2fapp_2fv1alpha1_2fmodule_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fapp_2fv1alpha1_2fmodule_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/descriptor.pb-c.h"

typedef struct Cosmos__App__V1alpha1__ModuleDescriptor Cosmos__App__V1alpha1__ModuleDescriptor;
typedef struct Cosmos__App__V1alpha1__PackageReference Cosmos__App__V1alpha1__PackageReference;
typedef struct Cosmos__App__V1alpha1__MigrateFromInfo Cosmos__App__V1alpha1__MigrateFromInfo;


/* --- enums --- */


/* --- messages --- */

/*
 * ModuleDescriptor describes an app module.
 */
struct  Cosmos__App__V1alpha1__ModuleDescriptor
{
  ProtobufCMessage base;
  /*
   * go_import names the package that should be imported by an app to load the
   * module in the runtime module registry. It is required to make debugging
   * of configuration errors easier for users.
   */
  char *go_import;
  /*
   * use_package refers to a protobuf package that this module
   * uses and exposes to the world. In an app, only one module should "use"
   * or own a single protobuf package. It is assumed that the module uses
   * all of the .proto files in a single package.
   */
  size_t n_use_package;
  Cosmos__App__V1alpha1__PackageReference **use_package;
  /*
   * can_migrate_from defines which module versions this module can migrate
   * state from. The framework will check that one module version is able to
   * migrate from a previous module version before attempting to update its
   * config. It is assumed that modules can transitively migrate from earlier
   * versions. For instance if v3 declares it can migrate from v2, and v2
   * declares it can migrate from v1, the framework knows how to migrate
   * from v1 to v3, assuming all 3 module versions are registered at runtime.
   */
  size_t n_can_migrate_from;
  Cosmos__App__V1alpha1__MigrateFromInfo **can_migrate_from;
};
#define COSMOS__APP__V1ALPHA1__MODULE_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__app__v1alpha1__module_descriptor__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


/*
 * PackageReference is a reference to a protobuf package used by a module.
 */
struct  Cosmos__App__V1alpha1__PackageReference
{
  ProtobufCMessage base;
  /*
   * name is the fully-qualified name of the package.
   */
  char *name;
  /*
   * revision is the optional revision of the package that is being used.
   * Protobuf packages used in Cosmos should generally have a major version
   * as the last part of the package name, ex. foo.bar.baz.v1.
   * The revision of a package can be thought of as the minor version of a
   * package which has additional backwards compatible definitions that weren't
   * present in a previous version.
   * A package should indicate its revision with a source code comment
   * above the package declaration in one of its files containing the
   * text "Revision N" where N is an integer revision. All packages start
   * at revision 0 the first time they are released in a module.
   * When a new version of a module is released and items are added to existing
   * .proto files, these definitions should contain comments of the form
   * "Since Revision N" where N is an integer revision.
   * When the module runtime starts up, it will check the pinned proto
   * image and panic if there are runtime protobuf definitions that are not
   * in the pinned descriptor which do not have
   * a "Since Revision N" comment or have a "Since Revision N" comment where
   * N is <= to the revision specified here. This indicates that the protobuf
   * files have been updated, but the pinned file descriptor hasn't.
   * If there are items in the pinned file descriptor with a revision
   * greater than the value indicated here, this will also cause a panic
   * as it may mean that the pinned descriptor for a legacy module has been
   * improperly updated or that there is some other versioning discrepancy.
   * Runtime protobuf definitions will also be checked for compatibility
   * with pinned file descriptors to make sure there are no incompatible changes.
   * This behavior ensures that:
   * * pinned proto images are up-to-date
   * * protobuf files are carefully annotated with revision comments which
   *   are important good client UX
   * * protobuf files are changed in backwards and forwards compatible ways
   */
  uint32_t revision;
};
#define COSMOS__APP__V1ALPHA1__PACKAGE_REFERENCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__app__v1alpha1__package_reference__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


/*
 * MigrateFromInfo is information on a module version that a newer module
 * can migrate from.
 */
struct  Cosmos__App__V1alpha1__MigrateFromInfo
{
  ProtobufCMessage base;
  /*
   * module is the fully-qualified protobuf name of the module config object
   * for the previous module version, ex: "cosmos.group.module.v1.Module".
   */
  char *module;
};
#define COSMOS__APP__V1ALPHA1__MIGRATE_FROM_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__app__v1alpha1__migrate_from_info__descriptor) \
    , (char *)protobuf_c_empty_string }


/* Cosmos__App__V1alpha1__ModuleDescriptor methods */
void   cosmos__app__v1alpha1__module_descriptor__init
                     (Cosmos__App__V1alpha1__ModuleDescriptor         *message);
size_t cosmos__app__v1alpha1__module_descriptor__get_packed_size
                     (const Cosmos__App__V1alpha1__ModuleDescriptor   *message);
size_t cosmos__app__v1alpha1__module_descriptor__pack
                     (const Cosmos__App__V1alpha1__ModuleDescriptor   *message,
                      uint8_t             *out);
size_t cosmos__app__v1alpha1__module_descriptor__pack_to_buffer
                     (const Cosmos__App__V1alpha1__ModuleDescriptor   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__App__V1alpha1__ModuleDescriptor *
       cosmos__app__v1alpha1__module_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__app__v1alpha1__module_descriptor__free_unpacked
                     (Cosmos__App__V1alpha1__ModuleDescriptor *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__App__V1alpha1__PackageReference methods */
void   cosmos__app__v1alpha1__package_reference__init
                     (Cosmos__App__V1alpha1__PackageReference         *message);
size_t cosmos__app__v1alpha1__package_reference__get_packed_size
                     (const Cosmos__App__V1alpha1__PackageReference   *message);
size_t cosmos__app__v1alpha1__package_reference__pack
                     (const Cosmos__App__V1alpha1__PackageReference   *message,
                      uint8_t             *out);
size_t cosmos__app__v1alpha1__package_reference__pack_to_buffer
                     (const Cosmos__App__V1alpha1__PackageReference   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__App__V1alpha1__PackageReference *
       cosmos__app__v1alpha1__package_reference__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__app__v1alpha1__package_reference__free_unpacked
                     (Cosmos__App__V1alpha1__PackageReference *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__App__V1alpha1__MigrateFromInfo methods */
void   cosmos__app__v1alpha1__migrate_from_info__init
                     (Cosmos__App__V1alpha1__MigrateFromInfo         *message);
size_t cosmos__app__v1alpha1__migrate_from_info__get_packed_size
                     (const Cosmos__App__V1alpha1__MigrateFromInfo   *message);
size_t cosmos__app__v1alpha1__migrate_from_info__pack
                     (const Cosmos__App__V1alpha1__MigrateFromInfo   *message,
                      uint8_t             *out);
size_t cosmos__app__v1alpha1__migrate_from_info__pack_to_buffer
                     (const Cosmos__App__V1alpha1__MigrateFromInfo   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__App__V1alpha1__MigrateFromInfo *
       cosmos__app__v1alpha1__migrate_from_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__app__v1alpha1__migrate_from_info__free_unpacked
                     (Cosmos__App__V1alpha1__MigrateFromInfo *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__App__V1alpha1__ModuleDescriptor_Closure)
                 (const Cosmos__App__V1alpha1__ModuleDescriptor *message,
                  void *closure_data);
typedef void (*Cosmos__App__V1alpha1__PackageReference_Closure)
                 (const Cosmos__App__V1alpha1__PackageReference *message,
                  void *closure_data);
typedef void (*Cosmos__App__V1alpha1__MigrateFromInfo_Closure)
                 (const Cosmos__App__V1alpha1__MigrateFromInfo *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__app__v1alpha1__module_descriptor__descriptor;
extern const ProtobufCMessageDescriptor cosmos__app__v1alpha1__package_reference__descriptor;
extern const ProtobufCMessageDescriptor cosmos__app__v1alpha1__migrate_from_info__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fapp_2fv1alpha1_2fmodule_2eproto__INCLUDED */
