/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/base/v1beta1/abci.proto */

#ifndef PROTOBUF_C_cosmos_2fbase_2fv1beta1_2fabci_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fbase_2fv1beta1_2fabci_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "tendermint/abci/types.pb-c.h"
#include "tendermint/types/block.pb-c.h"
#include "google/protobuf/any.pb-c.h"

typedef struct Cosmos__Base__Abci__V1beta1__TxResponse Cosmos__Base__Abci__V1beta1__TxResponse;
typedef struct Cosmos__Base__Abci__V1beta1__ABCIMessageLog Cosmos__Base__Abci__V1beta1__ABCIMessageLog;
typedef struct Cosmos__Base__Abci__V1beta1__StringEvent Cosmos__Base__Abci__V1beta1__StringEvent;
typedef struct Cosmos__Base__Abci__V1beta1__Attribute Cosmos__Base__Abci__V1beta1__Attribute;
typedef struct Cosmos__Base__Abci__V1beta1__GasInfo Cosmos__Base__Abci__V1beta1__GasInfo;
typedef struct Cosmos__Base__Abci__V1beta1__Result Cosmos__Base__Abci__V1beta1__Result;
typedef struct Cosmos__Base__Abci__V1beta1__SimulationResponse Cosmos__Base__Abci__V1beta1__SimulationResponse;
typedef struct Cosmos__Base__Abci__V1beta1__MsgData Cosmos__Base__Abci__V1beta1__MsgData;
typedef struct Cosmos__Base__Abci__V1beta1__TxMsgData Cosmos__Base__Abci__V1beta1__TxMsgData;
typedef struct Cosmos__Base__Abci__V1beta1__SearchTxsResult Cosmos__Base__Abci__V1beta1__SearchTxsResult;
typedef struct Cosmos__Base__Abci__V1beta1__SearchBlocksResult Cosmos__Base__Abci__V1beta1__SearchBlocksResult;


/* --- enums --- */


/* --- messages --- */

/*
 * TxResponse defines a structure containing relevant tx data and metadata. The
 * tags are stringified and the log is JSON decoded.
 */
struct  Cosmos__Base__Abci__V1beta1__TxResponse
{
  ProtobufCMessage base;
  /*
   * The block height
   */
  int64_t height;
  /*
   * The transaction hash.
   */
  char *txhash;
  /*
   * Namespace for the Code
   */
  char *codespace;
  /*
   * Response code.
   */
  uint32_t code;
  /*
   * Result bytes, if any.
   */
  char *data;
  /*
   * The output of the application's logger (raw string). May be
   * non-deterministic.
   */
  char *raw_log;
  /*
   * The output of the application's logger (typed). May be non-deterministic.
   */
  size_t n_logs;
  Cosmos__Base__Abci__V1beta1__ABCIMessageLog **logs;
  /*
   * Additional information. May be non-deterministic.
   */
  char *info;
  /*
   * Amount of gas requested for transaction.
   */
  int64_t gas_wanted;
  /*
   * Amount of gas consumed by transaction.
   */
  int64_t gas_used;
  /*
   * The request transaction bytes.
   */
  Google__Protobuf__Any *tx;
  /*
   * Time of the previous block. For heights > 1, it's the weighted median of
   * the timestamps of the valid votes in the block.LastCommit. For height == 1,
   * it's genesis time.
   */
  char *timestamp;
  /*
   * Events defines all the events emitted by processing a transaction. Note,
   * these events include those emitted by processing all the messages and those
   * emitted from the ante. Whereas Logs contains the events, with
   * additional metadata, emitted only by processing the messages.
   * Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
   */
  size_t n_events;
  Tendermint__Abci__Event **events;
};
#define COSMOS__BASE__ABCI__V1BETA1__TX_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__abci__v1beta1__tx_response__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, 0, 0, NULL, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
 */
struct  Cosmos__Base__Abci__V1beta1__ABCIMessageLog
{
  ProtobufCMessage base;
  uint32_t msg_index;
  char *log;
  /*
   * Events contains a slice of Event objects that were emitted during some
   * execution.
   */
  size_t n_events;
  Cosmos__Base__Abci__V1beta1__StringEvent **events;
};
#define COSMOS__BASE__ABCI__V1BETA1__ABCIMESSAGE_LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__abci__v1beta1__abcimessage_log__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * StringEvent defines en Event object wrapper where all the attributes
 * contain key/value pairs that are strings instead of raw bytes.
 */
struct  Cosmos__Base__Abci__V1beta1__StringEvent
{
  ProtobufCMessage base;
  char *type;
  size_t n_attributes;
  Cosmos__Base__Abci__V1beta1__Attribute **attributes;
};
#define COSMOS__BASE__ABCI__V1BETA1__STRING_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__abci__v1beta1__string_event__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


/*
 * Attribute defines an attribute wrapper where the key and value are
 * strings instead of raw bytes.
 */
struct  Cosmos__Base__Abci__V1beta1__Attribute
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define COSMOS__BASE__ABCI__V1BETA1__ATTRIBUTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__abci__v1beta1__attribute__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * GasInfo defines tx execution gas context.
 */
struct  Cosmos__Base__Abci__V1beta1__GasInfo
{
  ProtobufCMessage base;
  /*
   * GasWanted is the maximum units of work we allow this tx to perform.
   */
  uint64_t gas_wanted;
  /*
   * GasUsed is the amount of gas actually consumed.
   */
  uint64_t gas_used;
};
#define COSMOS__BASE__ABCI__V1BETA1__GAS_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__abci__v1beta1__gas_info__descriptor) \
    , 0, 0 }


/*
 * Result is the union of ResponseFormat and ResponseCheckTx.
 */
struct  Cosmos__Base__Abci__V1beta1__Result
{
  ProtobufCMessage base;
  /*
   * Data is any data returned from message or handler execution. It MUST be
   * length prefixed in order to separate data from multiple message executions.
   * Deprecated. This field is still populated, but prefer msg_response instead
   * because it also contains the Msg response typeURL.
   */
  ProtobufCBinaryData data PROTOBUF_C__DEPRECATED;
  /*
   * Log contains the log information from message or handler execution.
   */
  char *log;
  /*
   * Events contains a slice of Event objects that were emitted during message
   * or handler execution.
   */
  size_t n_events;
  Tendermint__Abci__Event **events;
  /*
   * msg_responses contains the Msg handler responses type packed in Anys.
   * Since: cosmos-sdk 0.46
   */
  size_t n_msg_responses;
  Google__Protobuf__Any **msg_responses;
};
#define COSMOS__BASE__ABCI__V1BETA1__RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__abci__v1beta1__result__descriptor) \
    , {0,NULL}, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


/*
 * SimulationResponse defines the response generated when a transaction is
 * successfully simulated.
 */
struct  Cosmos__Base__Abci__V1beta1__SimulationResponse
{
  ProtobufCMessage base;
  Cosmos__Base__Abci__V1beta1__GasInfo *gas_info;
  Cosmos__Base__Abci__V1beta1__Result *result;
};
#define COSMOS__BASE__ABCI__V1BETA1__SIMULATION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__abci__v1beta1__simulation_response__descriptor) \
    , NULL, NULL }


/*
 * MsgData defines the data returned in a Result object during message
 * execution.
 */
struct  Cosmos__Base__Abci__V1beta1__MsgData
{
  ProtobufCMessage base;
  char *msg_type;
  ProtobufCBinaryData data;
};
#define COSMOS__BASE__ABCI__V1BETA1__MSG_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__abci__v1beta1__msg_data__descriptor) \
    , (char *)protobuf_c_empty_string, {0,NULL} }


/*
 * TxMsgData defines a list of MsgData. A transaction will have a MsgData object
 * for each message.
 */
struct  Cosmos__Base__Abci__V1beta1__TxMsgData
{
  ProtobufCMessage base;
  /*
   * data field is deprecated and not populated.
   */
  size_t n_data PROTOBUF_C__DEPRECATED;
  Cosmos__Base__Abci__V1beta1__MsgData **data PROTOBUF_C__DEPRECATED;
  /*
   * msg_responses contains the Msg handler responses packed into Anys.
   * Since: cosmos-sdk 0.46
   */
  size_t n_msg_responses;
  Google__Protobuf__Any **msg_responses;
};
#define COSMOS__BASE__ABCI__V1BETA1__TX_MSG_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__abci__v1beta1__tx_msg_data__descriptor) \
    , 0,NULL, 0,NULL }


/*
 * SearchTxsResult defines a structure for querying txs pageable
 */
struct  Cosmos__Base__Abci__V1beta1__SearchTxsResult
{
  ProtobufCMessage base;
  /*
   * Count of all txs
   */
  uint64_t total_count;
  /*
   * Count of txs in current page
   */
  uint64_t count;
  /*
   * Index of current page, start from 1
   */
  uint64_t page_number;
  /*
   * Count of total pages
   */
  uint64_t page_total;
  /*
   * Max count txs per page
   */
  uint64_t limit;
  /*
   * List of txs in current page
   */
  size_t n_txs;
  Cosmos__Base__Abci__V1beta1__TxResponse **txs;
};
#define COSMOS__BASE__ABCI__V1BETA1__SEARCH_TXS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__abci__v1beta1__search_txs_result__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL }


/*
 * SearchBlocksResult defines a structure for querying blocks pageable
 */
struct  Cosmos__Base__Abci__V1beta1__SearchBlocksResult
{
  ProtobufCMessage base;
  /*
   * Count of all blocks
   */
  int64_t total_count;
  /*
   * Count of blocks in current page
   */
  int64_t count;
  /*
   * Index of current page, start from 1
   */
  int64_t page_number;
  /*
   * Count of total pages
   */
  int64_t page_total;
  /*
   * Max count blocks per page
   */
  int64_t limit;
  /*
   * List of blocks in current page
   */
  size_t n_blocks;
  Tendermint__Types__Block **blocks;
};
#define COSMOS__BASE__ABCI__V1BETA1__SEARCH_BLOCKS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__abci__v1beta1__search_blocks_result__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL }


/* Cosmos__Base__Abci__V1beta1__TxResponse methods */
void   cosmos__base__abci__v1beta1__tx_response__init
                     (Cosmos__Base__Abci__V1beta1__TxResponse         *message);
size_t cosmos__base__abci__v1beta1__tx_response__get_packed_size
                     (const Cosmos__Base__Abci__V1beta1__TxResponse   *message);
size_t cosmos__base__abci__v1beta1__tx_response__pack
                     (const Cosmos__Base__Abci__V1beta1__TxResponse   *message,
                      uint8_t             *out);
size_t cosmos__base__abci__v1beta1__tx_response__pack_to_buffer
                     (const Cosmos__Base__Abci__V1beta1__TxResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__Abci__V1beta1__TxResponse *
       cosmos__base__abci__v1beta1__tx_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__abci__v1beta1__tx_response__free_unpacked
                     (Cosmos__Base__Abci__V1beta1__TxResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Base__Abci__V1beta1__ABCIMessageLog methods */
void   cosmos__base__abci__v1beta1__abcimessage_log__init
                     (Cosmos__Base__Abci__V1beta1__ABCIMessageLog         *message);
size_t cosmos__base__abci__v1beta1__abcimessage_log__get_packed_size
                     (const Cosmos__Base__Abci__V1beta1__ABCIMessageLog   *message);
size_t cosmos__base__abci__v1beta1__abcimessage_log__pack
                     (const Cosmos__Base__Abci__V1beta1__ABCIMessageLog   *message,
                      uint8_t             *out);
size_t cosmos__base__abci__v1beta1__abcimessage_log__pack_to_buffer
                     (const Cosmos__Base__Abci__V1beta1__ABCIMessageLog   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__Abci__V1beta1__ABCIMessageLog *
       cosmos__base__abci__v1beta1__abcimessage_log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__abci__v1beta1__abcimessage_log__free_unpacked
                     (Cosmos__Base__Abci__V1beta1__ABCIMessageLog *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Base__Abci__V1beta1__StringEvent methods */
void   cosmos__base__abci__v1beta1__string_event__init
                     (Cosmos__Base__Abci__V1beta1__StringEvent         *message);
size_t cosmos__base__abci__v1beta1__string_event__get_packed_size
                     (const Cosmos__Base__Abci__V1beta1__StringEvent   *message);
size_t cosmos__base__abci__v1beta1__string_event__pack
                     (const Cosmos__Base__Abci__V1beta1__StringEvent   *message,
                      uint8_t             *out);
size_t cosmos__base__abci__v1beta1__string_event__pack_to_buffer
                     (const Cosmos__Base__Abci__V1beta1__StringEvent   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__Abci__V1beta1__StringEvent *
       cosmos__base__abci__v1beta1__string_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__abci__v1beta1__string_event__free_unpacked
                     (Cosmos__Base__Abci__V1beta1__StringEvent *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Base__Abci__V1beta1__Attribute methods */
void   cosmos__base__abci__v1beta1__attribute__init
                     (Cosmos__Base__Abci__V1beta1__Attribute         *message);
size_t cosmos__base__abci__v1beta1__attribute__get_packed_size
                     (const Cosmos__Base__Abci__V1beta1__Attribute   *message);
size_t cosmos__base__abci__v1beta1__attribute__pack
                     (const Cosmos__Base__Abci__V1beta1__Attribute   *message,
                      uint8_t             *out);
size_t cosmos__base__abci__v1beta1__attribute__pack_to_buffer
                     (const Cosmos__Base__Abci__V1beta1__Attribute   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__Abci__V1beta1__Attribute *
       cosmos__base__abci__v1beta1__attribute__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__abci__v1beta1__attribute__free_unpacked
                     (Cosmos__Base__Abci__V1beta1__Attribute *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Base__Abci__V1beta1__GasInfo methods */
void   cosmos__base__abci__v1beta1__gas_info__init
                     (Cosmos__Base__Abci__V1beta1__GasInfo         *message);
size_t cosmos__base__abci__v1beta1__gas_info__get_packed_size
                     (const Cosmos__Base__Abci__V1beta1__GasInfo   *message);
size_t cosmos__base__abci__v1beta1__gas_info__pack
                     (const Cosmos__Base__Abci__V1beta1__GasInfo   *message,
                      uint8_t             *out);
size_t cosmos__base__abci__v1beta1__gas_info__pack_to_buffer
                     (const Cosmos__Base__Abci__V1beta1__GasInfo   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__Abci__V1beta1__GasInfo *
       cosmos__base__abci__v1beta1__gas_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__abci__v1beta1__gas_info__free_unpacked
                     (Cosmos__Base__Abci__V1beta1__GasInfo *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Base__Abci__V1beta1__Result methods */
void   cosmos__base__abci__v1beta1__result__init
                     (Cosmos__Base__Abci__V1beta1__Result         *message);
size_t cosmos__base__abci__v1beta1__result__get_packed_size
                     (const Cosmos__Base__Abci__V1beta1__Result   *message);
size_t cosmos__base__abci__v1beta1__result__pack
                     (const Cosmos__Base__Abci__V1beta1__Result   *message,
                      uint8_t             *out);
size_t cosmos__base__abci__v1beta1__result__pack_to_buffer
                     (const Cosmos__Base__Abci__V1beta1__Result   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__Abci__V1beta1__Result *
       cosmos__base__abci__v1beta1__result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__abci__v1beta1__result__free_unpacked
                     (Cosmos__Base__Abci__V1beta1__Result *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Base__Abci__V1beta1__SimulationResponse methods */
void   cosmos__base__abci__v1beta1__simulation_response__init
                     (Cosmos__Base__Abci__V1beta1__SimulationResponse         *message);
size_t cosmos__base__abci__v1beta1__simulation_response__get_packed_size
                     (const Cosmos__Base__Abci__V1beta1__SimulationResponse   *message);
size_t cosmos__base__abci__v1beta1__simulation_response__pack
                     (const Cosmos__Base__Abci__V1beta1__SimulationResponse   *message,
                      uint8_t             *out);
size_t cosmos__base__abci__v1beta1__simulation_response__pack_to_buffer
                     (const Cosmos__Base__Abci__V1beta1__SimulationResponse   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__Abci__V1beta1__SimulationResponse *
       cosmos__base__abci__v1beta1__simulation_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__abci__v1beta1__simulation_response__free_unpacked
                     (Cosmos__Base__Abci__V1beta1__SimulationResponse *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Base__Abci__V1beta1__MsgData methods */
void   cosmos__base__abci__v1beta1__msg_data__init
                     (Cosmos__Base__Abci__V1beta1__MsgData         *message);
size_t cosmos__base__abci__v1beta1__msg_data__get_packed_size
                     (const Cosmos__Base__Abci__V1beta1__MsgData   *message);
size_t cosmos__base__abci__v1beta1__msg_data__pack
                     (const Cosmos__Base__Abci__V1beta1__MsgData   *message,
                      uint8_t             *out);
size_t cosmos__base__abci__v1beta1__msg_data__pack_to_buffer
                     (const Cosmos__Base__Abci__V1beta1__MsgData   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__Abci__V1beta1__MsgData *
       cosmos__base__abci__v1beta1__msg_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__abci__v1beta1__msg_data__free_unpacked
                     (Cosmos__Base__Abci__V1beta1__MsgData *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Base__Abci__V1beta1__TxMsgData methods */
void   cosmos__base__abci__v1beta1__tx_msg_data__init
                     (Cosmos__Base__Abci__V1beta1__TxMsgData         *message);
size_t cosmos__base__abci__v1beta1__tx_msg_data__get_packed_size
                     (const Cosmos__Base__Abci__V1beta1__TxMsgData   *message);
size_t cosmos__base__abci__v1beta1__tx_msg_data__pack
                     (const Cosmos__Base__Abci__V1beta1__TxMsgData   *message,
                      uint8_t             *out);
size_t cosmos__base__abci__v1beta1__tx_msg_data__pack_to_buffer
                     (const Cosmos__Base__Abci__V1beta1__TxMsgData   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__Abci__V1beta1__TxMsgData *
       cosmos__base__abci__v1beta1__tx_msg_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__abci__v1beta1__tx_msg_data__free_unpacked
                     (Cosmos__Base__Abci__V1beta1__TxMsgData *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Base__Abci__V1beta1__SearchTxsResult methods */
void   cosmos__base__abci__v1beta1__search_txs_result__init
                     (Cosmos__Base__Abci__V1beta1__SearchTxsResult         *message);
size_t cosmos__base__abci__v1beta1__search_txs_result__get_packed_size
                     (const Cosmos__Base__Abci__V1beta1__SearchTxsResult   *message);
size_t cosmos__base__abci__v1beta1__search_txs_result__pack
                     (const Cosmos__Base__Abci__V1beta1__SearchTxsResult   *message,
                      uint8_t             *out);
size_t cosmos__base__abci__v1beta1__search_txs_result__pack_to_buffer
                     (const Cosmos__Base__Abci__V1beta1__SearchTxsResult   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__Abci__V1beta1__SearchTxsResult *
       cosmos__base__abci__v1beta1__search_txs_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__abci__v1beta1__search_txs_result__free_unpacked
                     (Cosmos__Base__Abci__V1beta1__SearchTxsResult *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Base__Abci__V1beta1__SearchBlocksResult methods */
void   cosmos__base__abci__v1beta1__search_blocks_result__init
                     (Cosmos__Base__Abci__V1beta1__SearchBlocksResult         *message);
size_t cosmos__base__abci__v1beta1__search_blocks_result__get_packed_size
                     (const Cosmos__Base__Abci__V1beta1__SearchBlocksResult   *message);
size_t cosmos__base__abci__v1beta1__search_blocks_result__pack
                     (const Cosmos__Base__Abci__V1beta1__SearchBlocksResult   *message,
                      uint8_t             *out);
size_t cosmos__base__abci__v1beta1__search_blocks_result__pack_to_buffer
                     (const Cosmos__Base__Abci__V1beta1__SearchBlocksResult   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__Abci__V1beta1__SearchBlocksResult *
       cosmos__base__abci__v1beta1__search_blocks_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__abci__v1beta1__search_blocks_result__free_unpacked
                     (Cosmos__Base__Abci__V1beta1__SearchBlocksResult *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Base__Abci__V1beta1__TxResponse_Closure)
                 (const Cosmos__Base__Abci__V1beta1__TxResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Base__Abci__V1beta1__ABCIMessageLog_Closure)
                 (const Cosmos__Base__Abci__V1beta1__ABCIMessageLog *message,
                  void *closure_data);
typedef void (*Cosmos__Base__Abci__V1beta1__StringEvent_Closure)
                 (const Cosmos__Base__Abci__V1beta1__StringEvent *message,
                  void *closure_data);
typedef void (*Cosmos__Base__Abci__V1beta1__Attribute_Closure)
                 (const Cosmos__Base__Abci__V1beta1__Attribute *message,
                  void *closure_data);
typedef void (*Cosmos__Base__Abci__V1beta1__GasInfo_Closure)
                 (const Cosmos__Base__Abci__V1beta1__GasInfo *message,
                  void *closure_data);
typedef void (*Cosmos__Base__Abci__V1beta1__Result_Closure)
                 (const Cosmos__Base__Abci__V1beta1__Result *message,
                  void *closure_data);
typedef void (*Cosmos__Base__Abci__V1beta1__SimulationResponse_Closure)
                 (const Cosmos__Base__Abci__V1beta1__SimulationResponse *message,
                  void *closure_data);
typedef void (*Cosmos__Base__Abci__V1beta1__MsgData_Closure)
                 (const Cosmos__Base__Abci__V1beta1__MsgData *message,
                  void *closure_data);
typedef void (*Cosmos__Base__Abci__V1beta1__TxMsgData_Closure)
                 (const Cosmos__Base__Abci__V1beta1__TxMsgData *message,
                  void *closure_data);
typedef void (*Cosmos__Base__Abci__V1beta1__SearchTxsResult_Closure)
                 (const Cosmos__Base__Abci__V1beta1__SearchTxsResult *message,
                  void *closure_data);
typedef void (*Cosmos__Base__Abci__V1beta1__SearchBlocksResult_Closure)
                 (const Cosmos__Base__Abci__V1beta1__SearchBlocksResult *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__base__abci__v1beta1__tx_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__base__abci__v1beta1__abcimessage_log__descriptor;
extern const ProtobufCMessageDescriptor cosmos__base__abci__v1beta1__string_event__descriptor;
extern const ProtobufCMessageDescriptor cosmos__base__abci__v1beta1__attribute__descriptor;
extern const ProtobufCMessageDescriptor cosmos__base__abci__v1beta1__gas_info__descriptor;
extern const ProtobufCMessageDescriptor cosmos__base__abci__v1beta1__result__descriptor;
extern const ProtobufCMessageDescriptor cosmos__base__abci__v1beta1__simulation_response__descriptor;
extern const ProtobufCMessageDescriptor cosmos__base__abci__v1beta1__msg_data__descriptor;
extern const ProtobufCMessageDescriptor cosmos__base__abci__v1beta1__tx_msg_data__descriptor;
extern const ProtobufCMessageDescriptor cosmos__base__abci__v1beta1__search_txs_result__descriptor;
extern const ProtobufCMessageDescriptor cosmos__base__abci__v1beta1__search_blocks_result__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fbase_2fv1beta1_2fabci_2eproto__INCLUDED */
