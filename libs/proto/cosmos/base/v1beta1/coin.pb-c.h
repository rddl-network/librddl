/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/base/v1beta1/coin.proto */

#ifndef PROTOBUF_C_cosmos_2fbase_2fv1beta1_2fcoin_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fbase_2fv1beta1_2fcoin_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "cosmos_proto/cosmos.pb-c.h"
#include "amino/amino.pb-c.h"

typedef struct Cosmos__Base__V1beta1__Coin Cosmos__Base__V1beta1__Coin;
typedef struct Cosmos__Base__V1beta1__DecCoin Cosmos__Base__V1beta1__DecCoin;
typedef struct Cosmos__Base__V1beta1__IntProto Cosmos__Base__V1beta1__IntProto;
typedef struct Cosmos__Base__V1beta1__DecProto Cosmos__Base__V1beta1__DecProto;


/* --- enums --- */


/* --- messages --- */

/*
 * Coin defines a token with a denomination and an amount.
 * NOTE: The amount field is an Int which implements the custom method
 * signatures required by gogoproto.
 */
struct  Cosmos__Base__V1beta1__Coin
{
  ProtobufCMessage base;
  char *denom;
  char *amount;
};
#define COSMOS__BASE__V1BETA1__COIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__v1beta1__coin__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * DecCoin defines a token with a denomination and a decimal amount.
 * NOTE: The amount field is an Dec which implements the custom method
 * signatures required by gogoproto.
 */
struct  Cosmos__Base__V1beta1__DecCoin
{
  ProtobufCMessage base;
  char *denom;
  char *amount;
};
#define COSMOS__BASE__V1BETA1__DEC_COIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__v1beta1__dec_coin__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * IntProto defines a Protobuf wrapper around an Int object.
 */
struct  Cosmos__Base__V1beta1__IntProto
{
  ProtobufCMessage base;
  char *int_;
};
#define COSMOS__BASE__V1BETA1__INT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__v1beta1__int_proto__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * DecProto defines a Protobuf wrapper around a Dec object.
 */
struct  Cosmos__Base__V1beta1__DecProto
{
  ProtobufCMessage base;
  char *dec;
};
#define COSMOS__BASE__V1BETA1__DEC_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__base__v1beta1__dec_proto__descriptor) \
    , (char *)protobuf_c_empty_string }


/* Cosmos__Base__V1beta1__Coin methods */
void   cosmos__base__v1beta1__coin__init
                     (Cosmos__Base__V1beta1__Coin         *message);
size_t cosmos__base__v1beta1__coin__get_packed_size
                     (const Cosmos__Base__V1beta1__Coin   *message);
size_t cosmos__base__v1beta1__coin__pack
                     (const Cosmos__Base__V1beta1__Coin   *message,
                      uint8_t             *out);
size_t cosmos__base__v1beta1__coin__pack_to_buffer
                     (const Cosmos__Base__V1beta1__Coin   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__V1beta1__Coin *
       cosmos__base__v1beta1__coin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__v1beta1__coin__free_unpacked
                     (Cosmos__Base__V1beta1__Coin *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Base__V1beta1__DecCoin methods */
void   cosmos__base__v1beta1__dec_coin__init
                     (Cosmos__Base__V1beta1__DecCoin         *message);
size_t cosmos__base__v1beta1__dec_coin__get_packed_size
                     (const Cosmos__Base__V1beta1__DecCoin   *message);
size_t cosmos__base__v1beta1__dec_coin__pack
                     (const Cosmos__Base__V1beta1__DecCoin   *message,
                      uint8_t             *out);
size_t cosmos__base__v1beta1__dec_coin__pack_to_buffer
                     (const Cosmos__Base__V1beta1__DecCoin   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__V1beta1__DecCoin *
       cosmos__base__v1beta1__dec_coin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__v1beta1__dec_coin__free_unpacked
                     (Cosmos__Base__V1beta1__DecCoin *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Base__V1beta1__IntProto methods */
void   cosmos__base__v1beta1__int_proto__init
                     (Cosmos__Base__V1beta1__IntProto         *message);
size_t cosmos__base__v1beta1__int_proto__get_packed_size
                     (const Cosmos__Base__V1beta1__IntProto   *message);
size_t cosmos__base__v1beta1__int_proto__pack
                     (const Cosmos__Base__V1beta1__IntProto   *message,
                      uint8_t             *out);
size_t cosmos__base__v1beta1__int_proto__pack_to_buffer
                     (const Cosmos__Base__V1beta1__IntProto   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__V1beta1__IntProto *
       cosmos__base__v1beta1__int_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__v1beta1__int_proto__free_unpacked
                     (Cosmos__Base__V1beta1__IntProto *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Base__V1beta1__DecProto methods */
void   cosmos__base__v1beta1__dec_proto__init
                     (Cosmos__Base__V1beta1__DecProto         *message);
size_t cosmos__base__v1beta1__dec_proto__get_packed_size
                     (const Cosmos__Base__V1beta1__DecProto   *message);
size_t cosmos__base__v1beta1__dec_proto__pack
                     (const Cosmos__Base__V1beta1__DecProto   *message,
                      uint8_t             *out);
size_t cosmos__base__v1beta1__dec_proto__pack_to_buffer
                     (const Cosmos__Base__V1beta1__DecProto   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Base__V1beta1__DecProto *
       cosmos__base__v1beta1__dec_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__base__v1beta1__dec_proto__free_unpacked
                     (Cosmos__Base__V1beta1__DecProto *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Base__V1beta1__Coin_Closure)
                 (const Cosmos__Base__V1beta1__Coin *message,
                  void *closure_data);
typedef void (*Cosmos__Base__V1beta1__DecCoin_Closure)
                 (const Cosmos__Base__V1beta1__DecCoin *message,
                  void *closure_data);
typedef void (*Cosmos__Base__V1beta1__IntProto_Closure)
                 (const Cosmos__Base__V1beta1__IntProto *message,
                  void *closure_data);
typedef void (*Cosmos__Base__V1beta1__DecProto_Closure)
                 (const Cosmos__Base__V1beta1__DecProto *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__base__v1beta1__coin__descriptor;
extern const ProtobufCMessageDescriptor cosmos__base__v1beta1__dec_coin__descriptor;
extern const ProtobufCMessageDescriptor cosmos__base__v1beta1__int_proto__descriptor;
extern const ProtobufCMessageDescriptor cosmos__base__v1beta1__dec_proto__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fbase_2fv1beta1_2fcoin_2eproto__INCLUDED */
