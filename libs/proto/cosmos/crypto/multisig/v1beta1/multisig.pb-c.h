/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos/crypto/multisig/v1beta1/multisig.proto */

#ifndef PROTOBUF_C_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "gogoproto/gogo.pb-c.h"

typedef struct Cosmos__Crypto__Multisig__V1beta1__MultiSignature Cosmos__Crypto__Multisig__V1beta1__MultiSignature;
typedef struct Cosmos__Crypto__Multisig__V1beta1__CompactBitArray Cosmos__Crypto__Multisig__V1beta1__CompactBitArray;


/* --- enums --- */


/* --- messages --- */

/*
 * MultiSignature wraps the signatures from a multisig.LegacyAminoPubKey.
 * See cosmos.tx.v1betata1.ModeInfo.Multi for how to specify which signers
 * signed and with which modes.
 */
struct  Cosmos__Crypto__Multisig__V1beta1__MultiSignature
{
  ProtobufCMessage base;
  size_t n_signatures;
  ProtobufCBinaryData *signatures;
};
#define COSMOS__CRYPTO__MULTISIG__V1BETA1__MULTI_SIGNATURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__crypto__multisig__v1beta1__multi_signature__descriptor) \
    , 0,NULL }


/*
 * CompactBitArray is an implementation of a space efficient bit array.
 * This is used to ensure that the encoded data takes up a minimal amount of
 * space after proto encoding.
 * This is not thread safe, and is not intended for concurrent usage.
 */
struct  Cosmos__Crypto__Multisig__V1beta1__CompactBitArray
{
  ProtobufCMessage base;
  uint32_t extra_bits_stored;
  ProtobufCBinaryData elems;
};
#define COSMOS__CRYPTO__MULTISIG__V1BETA1__COMPACT_BIT_ARRAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos__crypto__multisig__v1beta1__compact_bit_array__descriptor) \
    , 0, {0,NULL} }


/* Cosmos__Crypto__Multisig__V1beta1__MultiSignature methods */
void   cosmos__crypto__multisig__v1beta1__multi_signature__init
                     (Cosmos__Crypto__Multisig__V1beta1__MultiSignature         *message);
size_t cosmos__crypto__multisig__v1beta1__multi_signature__get_packed_size
                     (const Cosmos__Crypto__Multisig__V1beta1__MultiSignature   *message);
size_t cosmos__crypto__multisig__v1beta1__multi_signature__pack
                     (const Cosmos__Crypto__Multisig__V1beta1__MultiSignature   *message,
                      uint8_t             *out);
size_t cosmos__crypto__multisig__v1beta1__multi_signature__pack_to_buffer
                     (const Cosmos__Crypto__Multisig__V1beta1__MultiSignature   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Crypto__Multisig__V1beta1__MultiSignature *
       cosmos__crypto__multisig__v1beta1__multi_signature__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__crypto__multisig__v1beta1__multi_signature__free_unpacked
                     (Cosmos__Crypto__Multisig__V1beta1__MultiSignature *message,
                      ProtobufCAllocator *allocator);
/* Cosmos__Crypto__Multisig__V1beta1__CompactBitArray methods */
void   cosmos__crypto__multisig__v1beta1__compact_bit_array__init
                     (Cosmos__Crypto__Multisig__V1beta1__CompactBitArray         *message);
size_t cosmos__crypto__multisig__v1beta1__compact_bit_array__get_packed_size
                     (const Cosmos__Crypto__Multisig__V1beta1__CompactBitArray   *message);
size_t cosmos__crypto__multisig__v1beta1__compact_bit_array__pack
                     (const Cosmos__Crypto__Multisig__V1beta1__CompactBitArray   *message,
                      uint8_t             *out);
size_t cosmos__crypto__multisig__v1beta1__compact_bit_array__pack_to_buffer
                     (const Cosmos__Crypto__Multisig__V1beta1__CompactBitArray   *message,
                      ProtobufCBuffer     *buffer);
Cosmos__Crypto__Multisig__V1beta1__CompactBitArray *
       cosmos__crypto__multisig__v1beta1__compact_bit_array__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos__crypto__multisig__v1beta1__compact_bit_array__free_unpacked
                     (Cosmos__Crypto__Multisig__V1beta1__CompactBitArray *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cosmos__Crypto__Multisig__V1beta1__MultiSignature_Closure)
                 (const Cosmos__Crypto__Multisig__V1beta1__MultiSignature *message,
                  void *closure_data);
typedef void (*Cosmos__Crypto__Multisig__V1beta1__CompactBitArray_Closure)
                 (const Cosmos__Crypto__Multisig__V1beta1__CompactBitArray *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cosmos__crypto__multisig__v1beta1__multi_signature__descriptor;
extern const ProtobufCMessageDescriptor cosmos__crypto__multisig__v1beta1__compact_bit_array__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto__INCLUDED */
