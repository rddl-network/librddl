/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cosmos_proto/cosmos.proto */

#ifndef PROTOBUF_C_cosmos_5fproto_2fcosmos_2eproto__INCLUDED
#define PROTOBUF_C_cosmos_5fproto_2fcosmos_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/descriptor.pb-c.h"

typedef struct CosmosProto__InterfaceDescriptor CosmosProto__InterfaceDescriptor;
typedef struct CosmosProto__ScalarDescriptor CosmosProto__ScalarDescriptor;


/* --- enums --- */

typedef enum _CosmosProto__ScalarType {
  COSMOS_PROTO__SCALAR_TYPE__SCALAR_TYPE_UNSPECIFIED = 0,
  COSMOS_PROTO__SCALAR_TYPE__SCALAR_TYPE_STRING = 1,
  COSMOS_PROTO__SCALAR_TYPE__SCALAR_TYPE_BYTES = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COSMOS_PROTO__SCALAR_TYPE)
} CosmosProto__ScalarType;

/* --- messages --- */

/*
 * InterfaceDescriptor describes an interface type to be used with
 * accepts_interface and implements_interface and declared by declare_interface.
 */
struct  CosmosProto__InterfaceDescriptor
{
  ProtobufCMessage base;
  /*
   * name is the name of the interface. It should be a short-name (without
   * a period) such that the fully qualified name of the interface will be
   * package.name, ex. for the package a.b and interface named C, the
   * fully-qualified name will be a.b.C.
   */
  char *name;
  /*
   * description is a human-readable description of the interface and its
   * purpose.
   */
  char *description;
};
#define COSMOS_PROTO__INTERFACE_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos_proto__interface_descriptor__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * ScalarDescriptor describes an scalar type to be used with
 * the scalar field option and declared by declare_scalar.
 * Scalars extend simple protobuf built-in types with additional
 * syntax and semantics, for instance to represent big integers.
 * Scalars should ideally define an encoding such that there is only one
 * valid syntactical representation for a given semantic meaning,
 * i.e. the encoding should be deterministic.
 */
struct  CosmosProto__ScalarDescriptor
{
  ProtobufCMessage base;
  /*
   * name is the name of the scalar. It should be a short-name (without
   * a period) such that the fully qualified name of the scalar will be
   * package.name, ex. for the package a.b and scalar named C, the
   * fully-qualified name will be a.b.C.
   */
  char *name;
  /*
   * description is a human-readable description of the scalar and its
   * encoding format. For instance a big integer or decimal scalar should
   * specify precisely the expected encoding format.
   */
  char *description;
  /*
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   */
  size_t n_field_type;
  CosmosProto__ScalarType *field_type;
};
#define COSMOS_PROTO__SCALAR_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cosmos_proto__scalar_descriptor__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


/* CosmosProto__InterfaceDescriptor methods */
void   cosmos_proto__interface_descriptor__init
                     (CosmosProto__InterfaceDescriptor         *message);
size_t cosmos_proto__interface_descriptor__get_packed_size
                     (const CosmosProto__InterfaceDescriptor   *message);
size_t cosmos_proto__interface_descriptor__pack
                     (const CosmosProto__InterfaceDescriptor   *message,
                      uint8_t             *out);
size_t cosmos_proto__interface_descriptor__pack_to_buffer
                     (const CosmosProto__InterfaceDescriptor   *message,
                      ProtobufCBuffer     *buffer);
CosmosProto__InterfaceDescriptor *
       cosmos_proto__interface_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos_proto__interface_descriptor__free_unpacked
                     (CosmosProto__InterfaceDescriptor *message,
                      ProtobufCAllocator *allocator);
/* CosmosProto__ScalarDescriptor methods */
void   cosmos_proto__scalar_descriptor__init
                     (CosmosProto__ScalarDescriptor         *message);
size_t cosmos_proto__scalar_descriptor__get_packed_size
                     (const CosmosProto__ScalarDescriptor   *message);
size_t cosmos_proto__scalar_descriptor__pack
                     (const CosmosProto__ScalarDescriptor   *message,
                      uint8_t             *out);
size_t cosmos_proto__scalar_descriptor__pack_to_buffer
                     (const CosmosProto__ScalarDescriptor   *message,
                      ProtobufCBuffer     *buffer);
CosmosProto__ScalarDescriptor *
       cosmos_proto__scalar_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cosmos_proto__scalar_descriptor__free_unpacked
                     (CosmosProto__ScalarDescriptor *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CosmosProto__InterfaceDescriptor_Closure)
                 (const CosmosProto__InterfaceDescriptor *message,
                  void *closure_data);
typedef void (*CosmosProto__ScalarDescriptor_Closure)
                 (const CosmosProto__ScalarDescriptor *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    cosmos_proto__scalar_type__descriptor;
extern const ProtobufCMessageDescriptor cosmos_proto__interface_descriptor__descriptor;
extern const ProtobufCMessageDescriptor cosmos_proto__scalar_descriptor__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cosmos_5fproto_2fcosmos_2eproto__INCLUDED */
