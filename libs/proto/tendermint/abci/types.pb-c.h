/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tendermint/abci/types.proto */

#ifndef PROTOBUF_C_tendermint_2fabci_2ftypes_2eproto__INCLUDED
#define PROTOBUF_C_tendermint_2fabci_2ftypes_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "tendermint/crypto/proof.pb-c.h"
#include "tendermint/types/types.pb-c.h"
#include "tendermint/crypto/keys.pb-c.h"
#include "tendermint/types/params.pb-c.h"
#include "google/protobuf/timestamp.pb-c.h"
#include "gogoproto/gogo.pb-c.h"

typedef struct Tendermint__Abci__Request Tendermint__Abci__Request;
typedef struct Tendermint__Abci__RequestEcho Tendermint__Abci__RequestEcho;
typedef struct Tendermint__Abci__RequestFlush Tendermint__Abci__RequestFlush;
typedef struct Tendermint__Abci__RequestInfo Tendermint__Abci__RequestInfo;
typedef struct Tendermint__Abci__RequestInitChain Tendermint__Abci__RequestInitChain;
typedef struct Tendermint__Abci__RequestQuery Tendermint__Abci__RequestQuery;
typedef struct Tendermint__Abci__RequestBeginBlock Tendermint__Abci__RequestBeginBlock;
typedef struct Tendermint__Abci__RequestCheckTx Tendermint__Abci__RequestCheckTx;
typedef struct Tendermint__Abci__RequestDeliverTx Tendermint__Abci__RequestDeliverTx;
typedef struct Tendermint__Abci__RequestEndBlock Tendermint__Abci__RequestEndBlock;
typedef struct Tendermint__Abci__RequestCommit Tendermint__Abci__RequestCommit;
typedef struct Tendermint__Abci__RequestListSnapshots Tendermint__Abci__RequestListSnapshots;
typedef struct Tendermint__Abci__RequestOfferSnapshot Tendermint__Abci__RequestOfferSnapshot;
typedef struct Tendermint__Abci__RequestLoadSnapshotChunk Tendermint__Abci__RequestLoadSnapshotChunk;
typedef struct Tendermint__Abci__RequestApplySnapshotChunk Tendermint__Abci__RequestApplySnapshotChunk;
typedef struct Tendermint__Abci__RequestPrepareProposal Tendermint__Abci__RequestPrepareProposal;
typedef struct Tendermint__Abci__RequestProcessProposal Tendermint__Abci__RequestProcessProposal;
typedef struct Tendermint__Abci__Response Tendermint__Abci__Response;
typedef struct Tendermint__Abci__ResponseException Tendermint__Abci__ResponseException;
typedef struct Tendermint__Abci__ResponseEcho Tendermint__Abci__ResponseEcho;
typedef struct Tendermint__Abci__ResponseFlush Tendermint__Abci__ResponseFlush;
typedef struct Tendermint__Abci__ResponseInfo Tendermint__Abci__ResponseInfo;
typedef struct Tendermint__Abci__ResponseInitChain Tendermint__Abci__ResponseInitChain;
typedef struct Tendermint__Abci__ResponseQuery Tendermint__Abci__ResponseQuery;
typedef struct Tendermint__Abci__ResponseBeginBlock Tendermint__Abci__ResponseBeginBlock;
typedef struct Tendermint__Abci__ResponseCheckTx Tendermint__Abci__ResponseCheckTx;
typedef struct Tendermint__Abci__ResponseDeliverTx Tendermint__Abci__ResponseDeliverTx;
typedef struct Tendermint__Abci__ResponseEndBlock Tendermint__Abci__ResponseEndBlock;
typedef struct Tendermint__Abci__ResponseCommit Tendermint__Abci__ResponseCommit;
typedef struct Tendermint__Abci__ResponseListSnapshots Tendermint__Abci__ResponseListSnapshots;
typedef struct Tendermint__Abci__ResponseOfferSnapshot Tendermint__Abci__ResponseOfferSnapshot;
typedef struct Tendermint__Abci__ResponseLoadSnapshotChunk Tendermint__Abci__ResponseLoadSnapshotChunk;
typedef struct Tendermint__Abci__ResponseApplySnapshotChunk Tendermint__Abci__ResponseApplySnapshotChunk;
typedef struct Tendermint__Abci__ResponsePrepareProposal Tendermint__Abci__ResponsePrepareProposal;
typedef struct Tendermint__Abci__ResponseProcessProposal Tendermint__Abci__ResponseProcessProposal;
typedef struct Tendermint__Abci__CommitInfo Tendermint__Abci__CommitInfo;
typedef struct Tendermint__Abci__ExtendedCommitInfo Tendermint__Abci__ExtendedCommitInfo;
typedef struct Tendermint__Abci__Event Tendermint__Abci__Event;
typedef struct Tendermint__Abci__EventAttribute Tendermint__Abci__EventAttribute;
typedef struct Tendermint__Abci__TxResult Tendermint__Abci__TxResult;
typedef struct Tendermint__Abci__Validator Tendermint__Abci__Validator;
typedef struct Tendermint__Abci__ValidatorUpdate Tendermint__Abci__ValidatorUpdate;
typedef struct Tendermint__Abci__VoteInfo Tendermint__Abci__VoteInfo;
typedef struct Tendermint__Abci__ExtendedVoteInfo Tendermint__Abci__ExtendedVoteInfo;
typedef struct Tendermint__Abci__Misbehavior Tendermint__Abci__Misbehavior;
typedef struct Tendermint__Abci__Snapshot Tendermint__Abci__Snapshot;


/* --- enums --- */

typedef enum _Tendermint__Abci__ResponseOfferSnapshot__Result {
  /*
   * Unknown result, abort all snapshot restoration
   */
  TENDERMINT__ABCI__RESPONSE_OFFER_SNAPSHOT__RESULT__UNKNOWN = 0,
  /*
   * Snapshot accepted, apply chunks
   */
  TENDERMINT__ABCI__RESPONSE_OFFER_SNAPSHOT__RESULT__ACCEPT = 1,
  /*
   * Abort all snapshot restoration
   */
  TENDERMINT__ABCI__RESPONSE_OFFER_SNAPSHOT__RESULT__ABORT = 2,
  /*
   * Reject this specific snapshot, try others
   */
  TENDERMINT__ABCI__RESPONSE_OFFER_SNAPSHOT__RESULT__REJECT = 3,
  /*
   * Reject all snapshots of this format, try others
   */
  TENDERMINT__ABCI__RESPONSE_OFFER_SNAPSHOT__RESULT__REJECT_FORMAT = 4,
  /*
   * Reject all snapshots from the sender(s), try others
   */
  TENDERMINT__ABCI__RESPONSE_OFFER_SNAPSHOT__RESULT__REJECT_SENDER = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TENDERMINT__ABCI__RESPONSE_OFFER_SNAPSHOT__RESULT)
} Tendermint__Abci__ResponseOfferSnapshot__Result;
typedef enum _Tendermint__Abci__ResponseApplySnapshotChunk__Result {
  /*
   * Unknown result, abort all snapshot restoration
   */
  TENDERMINT__ABCI__RESPONSE_APPLY_SNAPSHOT_CHUNK__RESULT__UNKNOWN = 0,
  /*
   * Chunk successfully accepted
   */
  TENDERMINT__ABCI__RESPONSE_APPLY_SNAPSHOT_CHUNK__RESULT__ACCEPT = 1,
  /*
   * Abort all snapshot restoration
   */
  TENDERMINT__ABCI__RESPONSE_APPLY_SNAPSHOT_CHUNK__RESULT__ABORT = 2,
  /*
   * Retry chunk (combine with refetch and reject)
   */
  TENDERMINT__ABCI__RESPONSE_APPLY_SNAPSHOT_CHUNK__RESULT__RETRY = 3,
  /*
   * Retry snapshot (combine with refetch and reject)
   */
  TENDERMINT__ABCI__RESPONSE_APPLY_SNAPSHOT_CHUNK__RESULT__RETRY_SNAPSHOT = 4,
  /*
   * Reject this snapshot, try others
   */
  TENDERMINT__ABCI__RESPONSE_APPLY_SNAPSHOT_CHUNK__RESULT__REJECT_SNAPSHOT = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TENDERMINT__ABCI__RESPONSE_APPLY_SNAPSHOT_CHUNK__RESULT)
} Tendermint__Abci__ResponseApplySnapshotChunk__Result;
typedef enum _Tendermint__Abci__ResponseProcessProposal__ProposalStatus {
  TENDERMINT__ABCI__RESPONSE_PROCESS_PROPOSAL__PROPOSAL_STATUS__UNKNOWN = 0,
  TENDERMINT__ABCI__RESPONSE_PROCESS_PROPOSAL__PROPOSAL_STATUS__ACCEPT = 1,
  TENDERMINT__ABCI__RESPONSE_PROCESS_PROPOSAL__PROPOSAL_STATUS__REJECT = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TENDERMINT__ABCI__RESPONSE_PROCESS_PROPOSAL__PROPOSAL_STATUS)
} Tendermint__Abci__ResponseProcessProposal__ProposalStatus;
typedef enum _Tendermint__Abci__CheckTxType {
  TENDERMINT__ABCI__CHECK_TX_TYPE__NEW = 0,
  TENDERMINT__ABCI__CHECK_TX_TYPE__RECHECK = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TENDERMINT__ABCI__CHECK_TX_TYPE)
} Tendermint__Abci__CheckTxType;
typedef enum _Tendermint__Abci__MisbehaviorType {
  TENDERMINT__ABCI__MISBEHAVIOR_TYPE__UNKNOWN = 0,
  TENDERMINT__ABCI__MISBEHAVIOR_TYPE__DUPLICATE_VOTE = 1,
  TENDERMINT__ABCI__MISBEHAVIOR_TYPE__LIGHT_CLIENT_ATTACK = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TENDERMINT__ABCI__MISBEHAVIOR_TYPE)
} Tendermint__Abci__MisbehaviorType;

/* --- messages --- */

typedef enum {
  TENDERMINT__ABCI__REQUEST__VALUE__NOT_SET = 0,
  TENDERMINT__ABCI__REQUEST__VALUE_ECHO = 1,
  TENDERMINT__ABCI__REQUEST__VALUE_FLUSH = 2,
  TENDERMINT__ABCI__REQUEST__VALUE_INFO = 3,
  TENDERMINT__ABCI__REQUEST__VALUE_INIT_CHAIN = 5,
  TENDERMINT__ABCI__REQUEST__VALUE_QUERY = 6,
  TENDERMINT__ABCI__REQUEST__VALUE_BEGIN_BLOCK = 7,
  TENDERMINT__ABCI__REQUEST__VALUE_CHECK_TX = 8,
  TENDERMINT__ABCI__REQUEST__VALUE_DELIVER_TX = 9,
  TENDERMINT__ABCI__REQUEST__VALUE_END_BLOCK = 10,
  TENDERMINT__ABCI__REQUEST__VALUE_COMMIT = 11,
  TENDERMINT__ABCI__REQUEST__VALUE_LIST_SNAPSHOTS = 12,
  TENDERMINT__ABCI__REQUEST__VALUE_OFFER_SNAPSHOT = 13,
  TENDERMINT__ABCI__REQUEST__VALUE_LOAD_SNAPSHOT_CHUNK = 14,
  TENDERMINT__ABCI__REQUEST__VALUE_APPLY_SNAPSHOT_CHUNK = 15,
  TENDERMINT__ABCI__REQUEST__VALUE_PREPARE_PROPOSAL = 16,
  TENDERMINT__ABCI__REQUEST__VALUE_PROCESS_PROPOSAL = 17
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TENDERMINT__ABCI__REQUEST__VALUE__CASE)
} Tendermint__Abci__Request__ValueCase;

struct  Tendermint__Abci__Request
{
  ProtobufCMessage base;
  Tendermint__Abci__Request__ValueCase value_case;
  union {
    Tendermint__Abci__RequestEcho *echo;
    Tendermint__Abci__RequestFlush *flush;
    Tendermint__Abci__RequestInfo *info;
    Tendermint__Abci__RequestInitChain *init_chain;
    Tendermint__Abci__RequestQuery *query;
    Tendermint__Abci__RequestBeginBlock *begin_block;
    Tendermint__Abci__RequestCheckTx *check_tx;
    Tendermint__Abci__RequestDeliverTx *deliver_tx;
    Tendermint__Abci__RequestEndBlock *end_block;
    Tendermint__Abci__RequestCommit *commit;
    Tendermint__Abci__RequestListSnapshots *list_snapshots;
    Tendermint__Abci__RequestOfferSnapshot *offer_snapshot;
    Tendermint__Abci__RequestLoadSnapshotChunk *load_snapshot_chunk;
    Tendermint__Abci__RequestApplySnapshotChunk *apply_snapshot_chunk;
    Tendermint__Abci__RequestPrepareProposal *prepare_proposal;
    Tendermint__Abci__RequestProcessProposal *process_proposal;
  };
};
#define TENDERMINT__ABCI__REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request__descriptor) \
    , TENDERMINT__ABCI__REQUEST__VALUE__NOT_SET, {0} }


struct  Tendermint__Abci__RequestEcho
{
  ProtobufCMessage base;
  char *message;
};
#define TENDERMINT__ABCI__REQUEST_ECHO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_echo__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  Tendermint__Abci__RequestFlush
{
  ProtobufCMessage base;
};
#define TENDERMINT__ABCI__REQUEST_FLUSH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_flush__descriptor) \
     }


struct  Tendermint__Abci__RequestInfo
{
  ProtobufCMessage base;
  char *version;
  uint64_t block_version;
  uint64_t p2p_version;
  char *abci_version;
};
#define TENDERMINT__ABCI__REQUEST_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_info__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, (char *)protobuf_c_empty_string }


struct  Tendermint__Abci__RequestInitChain
{
  ProtobufCMessage base;
  Google__Protobuf__Timestamp *time;
  char *chain_id;
  Tendermint__Types__ConsensusParams *consensus_params;
  size_t n_validators;
  Tendermint__Abci__ValidatorUpdate **validators;
  ProtobufCBinaryData app_state_bytes;
  int64_t initial_height;
};
#define TENDERMINT__ABCI__REQUEST_INIT_CHAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_init_chain__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, NULL, 0,NULL, {0,NULL}, 0 }


struct  Tendermint__Abci__RequestQuery
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
  char *path;
  int64_t height;
  protobuf_c_boolean prove;
};
#define TENDERMINT__ABCI__REQUEST_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_query__descriptor) \
    , {0,NULL}, (char *)protobuf_c_empty_string, 0, 0 }


struct  Tendermint__Abci__RequestBeginBlock
{
  ProtobufCMessage base;
  ProtobufCBinaryData hash;
  Tendermint__Types__Header *header;
  Tendermint__Abci__CommitInfo *last_commit_info;
  size_t n_byzantine_validators;
  Tendermint__Abci__Misbehavior **byzantine_validators;
};
#define TENDERMINT__ABCI__REQUEST_BEGIN_BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_begin_block__descriptor) \
    , {0,NULL}, NULL, NULL, 0,NULL }


struct  Tendermint__Abci__RequestCheckTx
{
  ProtobufCMessage base;
  ProtobufCBinaryData tx;
  Tendermint__Abci__CheckTxType type;
};
#define TENDERMINT__ABCI__REQUEST_CHECK_TX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_check_tx__descriptor) \
    , {0,NULL}, TENDERMINT__ABCI__CHECK_TX_TYPE__NEW }


struct  Tendermint__Abci__RequestDeliverTx
{
  ProtobufCMessage base;
  ProtobufCBinaryData tx;
};
#define TENDERMINT__ABCI__REQUEST_DELIVER_TX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_deliver_tx__descriptor) \
    , {0,NULL} }


struct  Tendermint__Abci__RequestEndBlock
{
  ProtobufCMessage base;
  int64_t height;
};
#define TENDERMINT__ABCI__REQUEST_END_BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_end_block__descriptor) \
    , 0 }


struct  Tendermint__Abci__RequestCommit
{
  ProtobufCMessage base;
};
#define TENDERMINT__ABCI__REQUEST_COMMIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_commit__descriptor) \
     }


/*
 * lists available snapshots
 */
struct  Tendermint__Abci__RequestListSnapshots
{
  ProtobufCMessage base;
};
#define TENDERMINT__ABCI__REQUEST_LIST_SNAPSHOTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_list_snapshots__descriptor) \
     }


/*
 * offers a snapshot to the application
 */
struct  Tendermint__Abci__RequestOfferSnapshot
{
  ProtobufCMessage base;
  /*
   * snapshot offered by peers
   */
  Tendermint__Abci__Snapshot *snapshot;
  /*
   * light client-verified app hash for snapshot height
   */
  ProtobufCBinaryData app_hash;
};
#define TENDERMINT__ABCI__REQUEST_OFFER_SNAPSHOT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_offer_snapshot__descriptor) \
    , NULL, {0,NULL} }


/*
 * loads a snapshot chunk
 */
struct  Tendermint__Abci__RequestLoadSnapshotChunk
{
  ProtobufCMessage base;
  uint64_t height;
  uint32_t format;
  uint32_t chunk;
};
#define TENDERMINT__ABCI__REQUEST_LOAD_SNAPSHOT_CHUNK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_load_snapshot_chunk__descriptor) \
    , 0, 0, 0 }


/*
 * Applies a snapshot chunk
 */
struct  Tendermint__Abci__RequestApplySnapshotChunk
{
  ProtobufCMessage base;
  uint32_t index;
  ProtobufCBinaryData chunk;
  char *sender;
};
#define TENDERMINT__ABCI__REQUEST_APPLY_SNAPSHOT_CHUNK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_apply_snapshot_chunk__descriptor) \
    , 0, {0,NULL}, (char *)protobuf_c_empty_string }


struct  Tendermint__Abci__RequestPrepareProposal
{
  ProtobufCMessage base;
  /*
   * the modified transactions cannot exceed this size.
   */
  int64_t max_tx_bytes;
  /*
   * txs is an array of transactions that will be included in a block,
   * sent to the app for possible modifications.
   */
  size_t n_txs;
  ProtobufCBinaryData *txs;
  Tendermint__Abci__ExtendedCommitInfo *local_last_commit;
  size_t n_misbehavior;
  Tendermint__Abci__Misbehavior **misbehavior;
  int64_t height;
  Google__Protobuf__Timestamp *time;
  ProtobufCBinaryData next_validators_hash;
  /*
   * address of the public key of the validator proposing the block.
   */
  ProtobufCBinaryData proposer_address;
};
#define TENDERMINT__ABCI__REQUEST_PREPARE_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_prepare_proposal__descriptor) \
    , 0, 0,NULL, NULL, 0,NULL, 0, NULL, {0,NULL}, {0,NULL} }


struct  Tendermint__Abci__RequestProcessProposal
{
  ProtobufCMessage base;
  size_t n_txs;
  ProtobufCBinaryData *txs;
  Tendermint__Abci__CommitInfo *proposed_last_commit;
  size_t n_misbehavior;
  Tendermint__Abci__Misbehavior **misbehavior;
  /*
   * hash is the merkle root hash of the fields of the proposed block.
   */
  ProtobufCBinaryData hash;
  int64_t height;
  Google__Protobuf__Timestamp *time;
  ProtobufCBinaryData next_validators_hash;
  /*
   * address of the public key of the original proposer of the block.
   */
  ProtobufCBinaryData proposer_address;
};
#define TENDERMINT__ABCI__REQUEST_PROCESS_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__request_process_proposal__descriptor) \
    , 0,NULL, NULL, 0,NULL, {0,NULL}, 0, NULL, {0,NULL}, {0,NULL} }


typedef enum {
  TENDERMINT__ABCI__RESPONSE__VALUE__NOT_SET = 0,
  TENDERMINT__ABCI__RESPONSE__VALUE_EXCEPTION = 1,
  TENDERMINT__ABCI__RESPONSE__VALUE_ECHO = 2,
  TENDERMINT__ABCI__RESPONSE__VALUE_FLUSH = 3,
  TENDERMINT__ABCI__RESPONSE__VALUE_INFO = 4,
  TENDERMINT__ABCI__RESPONSE__VALUE_INIT_CHAIN = 6,
  TENDERMINT__ABCI__RESPONSE__VALUE_QUERY = 7,
  TENDERMINT__ABCI__RESPONSE__VALUE_BEGIN_BLOCK = 8,
  TENDERMINT__ABCI__RESPONSE__VALUE_CHECK_TX = 9,
  TENDERMINT__ABCI__RESPONSE__VALUE_DELIVER_TX = 10,
  TENDERMINT__ABCI__RESPONSE__VALUE_END_BLOCK = 11,
  TENDERMINT__ABCI__RESPONSE__VALUE_COMMIT = 12,
  TENDERMINT__ABCI__RESPONSE__VALUE_LIST_SNAPSHOTS = 13,
  TENDERMINT__ABCI__RESPONSE__VALUE_OFFER_SNAPSHOT = 14,
  TENDERMINT__ABCI__RESPONSE__VALUE_LOAD_SNAPSHOT_CHUNK = 15,
  TENDERMINT__ABCI__RESPONSE__VALUE_APPLY_SNAPSHOT_CHUNK = 16,
  TENDERMINT__ABCI__RESPONSE__VALUE_PREPARE_PROPOSAL = 17,
  TENDERMINT__ABCI__RESPONSE__VALUE_PROCESS_PROPOSAL = 18
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TENDERMINT__ABCI__RESPONSE__VALUE__CASE)
} Tendermint__Abci__Response__ValueCase;

struct  Tendermint__Abci__Response
{
  ProtobufCMessage base;
  Tendermint__Abci__Response__ValueCase value_case;
  union {
    Tendermint__Abci__ResponseException *exception;
    Tendermint__Abci__ResponseEcho *echo;
    Tendermint__Abci__ResponseFlush *flush;
    Tendermint__Abci__ResponseInfo *info;
    Tendermint__Abci__ResponseInitChain *init_chain;
    Tendermint__Abci__ResponseQuery *query;
    Tendermint__Abci__ResponseBeginBlock *begin_block;
    Tendermint__Abci__ResponseCheckTx *check_tx;
    Tendermint__Abci__ResponseDeliverTx *deliver_tx;
    Tendermint__Abci__ResponseEndBlock *end_block;
    Tendermint__Abci__ResponseCommit *commit;
    Tendermint__Abci__ResponseListSnapshots *list_snapshots;
    Tendermint__Abci__ResponseOfferSnapshot *offer_snapshot;
    Tendermint__Abci__ResponseLoadSnapshotChunk *load_snapshot_chunk;
    Tendermint__Abci__ResponseApplySnapshotChunk *apply_snapshot_chunk;
    Tendermint__Abci__ResponsePrepareProposal *prepare_proposal;
    Tendermint__Abci__ResponseProcessProposal *process_proposal;
  };
};
#define TENDERMINT__ABCI__RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response__descriptor) \
    , TENDERMINT__ABCI__RESPONSE__VALUE__NOT_SET, {0} }


/*
 * nondeterministic
 */
struct  Tendermint__Abci__ResponseException
{
  ProtobufCMessage base;
  char *error;
};
#define TENDERMINT__ABCI__RESPONSE_EXCEPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_exception__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  Tendermint__Abci__ResponseEcho
{
  ProtobufCMessage base;
  char *message;
};
#define TENDERMINT__ABCI__RESPONSE_ECHO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_echo__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  Tendermint__Abci__ResponseFlush
{
  ProtobufCMessage base;
};
#define TENDERMINT__ABCI__RESPONSE_FLUSH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_flush__descriptor) \
     }


struct  Tendermint__Abci__ResponseInfo
{
  ProtobufCMessage base;
  char *data;
  char *version;
  uint64_t app_version;
  int64_t last_block_height;
  ProtobufCBinaryData last_block_app_hash;
};
#define TENDERMINT__ABCI__RESPONSE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_info__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, {0,NULL} }


struct  Tendermint__Abci__ResponseInitChain
{
  ProtobufCMessage base;
  Tendermint__Types__ConsensusParams *consensus_params;
  size_t n_validators;
  Tendermint__Abci__ValidatorUpdate **validators;
  ProtobufCBinaryData app_hash;
};
#define TENDERMINT__ABCI__RESPONSE_INIT_CHAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_init_chain__descriptor) \
    , NULL, 0,NULL, {0,NULL} }


struct  Tendermint__Abci__ResponseQuery
{
  ProtobufCMessage base;
  uint32_t code;
  /*
   * bytes data = 2; // use "value" instead.
   */
  /*
   * nondeterministic
   */
  char *log;
  /*
   * nondeterministic
   */
  char *info;
  int64_t index;
  ProtobufCBinaryData key;
  ProtobufCBinaryData value;
  Tendermint__Crypto__ProofOps *proof_ops;
  int64_t height;
  char *codespace;
};
#define TENDERMINT__ABCI__RESPONSE_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_query__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, {0,NULL}, {0,NULL}, NULL, 0, (char *)protobuf_c_empty_string }


struct  Tendermint__Abci__ResponseBeginBlock
{
  ProtobufCMessage base;
  size_t n_events;
  Tendermint__Abci__Event **events;
};
#define TENDERMINT__ABCI__RESPONSE_BEGIN_BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_begin_block__descriptor) \
    , 0,NULL }


struct  Tendermint__Abci__ResponseCheckTx
{
  ProtobufCMessage base;
  uint32_t code;
  ProtobufCBinaryData data;
  /*
   * nondeterministic
   */
  char *log;
  /*
   * nondeterministic
   */
  char *info;
  int64_t gas_wanted;
  int64_t gas_used;
  size_t n_events;
  Tendermint__Abci__Event **events;
  char *codespace;
  char *sender;
  int64_t priority;
  /*
   * mempool_error is set by CometBFT.
   * ABCI applictions creating a ResponseCheckTX should not set mempool_error.
   */
  char *mempool_error;
};
#define TENDERMINT__ABCI__RESPONSE_CHECK_TX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_check_tx__descriptor) \
    , 0, {0,NULL}, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string }


struct  Tendermint__Abci__ResponseDeliverTx
{
  ProtobufCMessage base;
  uint32_t code;
  ProtobufCBinaryData data;
  /*
   * nondeterministic
   */
  char *log;
  /*
   * nondeterministic
   */
  char *info;
  int64_t gas_wanted;
  int64_t gas_used;
  /*
   * nondeterministic
   */
  size_t n_events;
  Tendermint__Abci__Event **events;
  char *codespace;
};
#define TENDERMINT__ABCI__RESPONSE_DELIVER_TX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_deliver_tx__descriptor) \
    , 0, {0,NULL}, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0,NULL, (char *)protobuf_c_empty_string }


struct  Tendermint__Abci__ResponseEndBlock
{
  ProtobufCMessage base;
  size_t n_validator_updates;
  Tendermint__Abci__ValidatorUpdate **validator_updates;
  Tendermint__Types__ConsensusParams *consensus_param_updates;
  size_t n_events;
  Tendermint__Abci__Event **events;
};
#define TENDERMINT__ABCI__RESPONSE_END_BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_end_block__descriptor) \
    , 0,NULL, NULL, 0,NULL }


struct  Tendermint__Abci__ResponseCommit
{
  ProtobufCMessage base;
  /*
   * reserve 1
   */
  ProtobufCBinaryData data;
  int64_t retain_height;
};
#define TENDERMINT__ABCI__RESPONSE_COMMIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_commit__descriptor) \
    , {0,NULL}, 0 }


struct  Tendermint__Abci__ResponseListSnapshots
{
  ProtobufCMessage base;
  size_t n_snapshots;
  Tendermint__Abci__Snapshot **snapshots;
};
#define TENDERMINT__ABCI__RESPONSE_LIST_SNAPSHOTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_list_snapshots__descriptor) \
    , 0,NULL }


struct  Tendermint__Abci__ResponseOfferSnapshot
{
  ProtobufCMessage base;
  Tendermint__Abci__ResponseOfferSnapshot__Result result;
};
#define TENDERMINT__ABCI__RESPONSE_OFFER_SNAPSHOT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_offer_snapshot__descriptor) \
    , TENDERMINT__ABCI__RESPONSE_OFFER_SNAPSHOT__RESULT__UNKNOWN }


struct  Tendermint__Abci__ResponseLoadSnapshotChunk
{
  ProtobufCMessage base;
  ProtobufCBinaryData chunk;
};
#define TENDERMINT__ABCI__RESPONSE_LOAD_SNAPSHOT_CHUNK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_load_snapshot_chunk__descriptor) \
    , {0,NULL} }


struct  Tendermint__Abci__ResponseApplySnapshotChunk
{
  ProtobufCMessage base;
  Tendermint__Abci__ResponseApplySnapshotChunk__Result result;
  /*
   * Chunks to refetch and reapply
   */
  size_t n_refetch_chunks;
  uint32_t *refetch_chunks;
  /*
   * Chunk senders to reject and ban
   */
  size_t n_reject_senders;
  char **reject_senders;
};
#define TENDERMINT__ABCI__RESPONSE_APPLY_SNAPSHOT_CHUNK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_apply_snapshot_chunk__descriptor) \
    , TENDERMINT__ABCI__RESPONSE_APPLY_SNAPSHOT_CHUNK__RESULT__UNKNOWN, 0,NULL, 0,NULL }


struct  Tendermint__Abci__ResponsePrepareProposal
{
  ProtobufCMessage base;
  size_t n_txs;
  ProtobufCBinaryData *txs;
};
#define TENDERMINT__ABCI__RESPONSE_PREPARE_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_prepare_proposal__descriptor) \
    , 0,NULL }


struct  Tendermint__Abci__ResponseProcessProposal
{
  ProtobufCMessage base;
  Tendermint__Abci__ResponseProcessProposal__ProposalStatus status;
};
#define TENDERMINT__ABCI__RESPONSE_PROCESS_PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__response_process_proposal__descriptor) \
    , TENDERMINT__ABCI__RESPONSE_PROCESS_PROPOSAL__PROPOSAL_STATUS__UNKNOWN }


struct  Tendermint__Abci__CommitInfo
{
  ProtobufCMessage base;
  int32_t round;
  size_t n_votes;
  Tendermint__Abci__VoteInfo **votes;
};
#define TENDERMINT__ABCI__COMMIT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__commit_info__descriptor) \
    , 0, 0,NULL }


struct  Tendermint__Abci__ExtendedCommitInfo
{
  ProtobufCMessage base;
  /*
   * The round at which the block proposer decided in the previous height.
   */
  int32_t round;
  /*
   * List of validators' addresses in the last validator set with their voting
   * information, including vote extensions.
   */
  size_t n_votes;
  Tendermint__Abci__ExtendedVoteInfo **votes;
};
#define TENDERMINT__ABCI__EXTENDED_COMMIT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__extended_commit_info__descriptor) \
    , 0, 0,NULL }


/*
 * Event allows application developers to attach additional information to
 * ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.
 * Later, transactions may be queried using these events.
 */
struct  Tendermint__Abci__Event
{
  ProtobufCMessage base;
  char *type;
  size_t n_attributes;
  Tendermint__Abci__EventAttribute **attributes;
};
#define TENDERMINT__ABCI__EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__event__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


/*
 * EventAttribute is a single key-value pair, associated with an event.
 */
struct  Tendermint__Abci__EventAttribute
{
  ProtobufCMessage base;
  char *key;
  char *value;
  /*
   * nondeterministic
   */
  protobuf_c_boolean index;
};
#define TENDERMINT__ABCI__EVENT_ATTRIBUTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__event_attribute__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


/*
 * TxResult contains results of executing the transaction.
 * One usage is indexing transaction results.
 */
struct  Tendermint__Abci__TxResult
{
  ProtobufCMessage base;
  int64_t height;
  uint32_t index;
  ProtobufCBinaryData tx;
  Tendermint__Abci__ResponseDeliverTx *result;
};
#define TENDERMINT__ABCI__TX_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__tx_result__descriptor) \
    , 0, 0, {0,NULL}, NULL }


/*
 * Validator
 */
struct  Tendermint__Abci__Validator
{
  ProtobufCMessage base;
  /*
   * The first 20 bytes of SHA256(public key)
   */
  ProtobufCBinaryData address;
  /*
   * PubKey pub_key = 2 [(gogoproto.nullable)=false];
   */
  /*
   * The voting power
   */
  int64_t power;
};
#define TENDERMINT__ABCI__VALIDATOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__validator__descriptor) \
    , {0,NULL}, 0 }


/*
 * ValidatorUpdate
 */
struct  Tendermint__Abci__ValidatorUpdate
{
  ProtobufCMessage base;
  Tendermint__Crypto__PublicKey *pub_key;
  int64_t power;
};
#define TENDERMINT__ABCI__VALIDATOR_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__validator_update__descriptor) \
    , NULL, 0 }


/*
 * VoteInfo
 */
struct  Tendermint__Abci__VoteInfo
{
  ProtobufCMessage base;
  Tendermint__Abci__Validator *validator;
  protobuf_c_boolean signed_last_block;
};
#define TENDERMINT__ABCI__VOTE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__vote_info__descriptor) \
    , NULL, 0 }


struct  Tendermint__Abci__ExtendedVoteInfo
{
  ProtobufCMessage base;
  Tendermint__Abci__Validator *validator;
  protobuf_c_boolean signed_last_block;
  /*
   * Reserved for future use
   */
  ProtobufCBinaryData vote_extension;
};
#define TENDERMINT__ABCI__EXTENDED_VOTE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__extended_vote_info__descriptor) \
    , NULL, 0, {0,NULL} }


struct  Tendermint__Abci__Misbehavior
{
  ProtobufCMessage base;
  Tendermint__Abci__MisbehaviorType type;
  /*
   * The offending validator
   */
  Tendermint__Abci__Validator *validator;
  /*
   * The height when the offense occurred
   */
  int64_t height;
  /*
   * The corresponding time where the offense occurred
   */
  Google__Protobuf__Timestamp *time;
  /*
   * Total voting power of the validator set in case the ABCI application does
   * not store historical validators.
   * https://github.com/tendermint/tendermint/issues/4581
   */
  int64_t total_voting_power;
};
#define TENDERMINT__ABCI__MISBEHAVIOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__misbehavior__descriptor) \
    , TENDERMINT__ABCI__MISBEHAVIOR_TYPE__UNKNOWN, NULL, 0, NULL, 0 }


struct  Tendermint__Abci__Snapshot
{
  ProtobufCMessage base;
  /*
   * The height at which the snapshot was taken
   */
  uint64_t height;
  /*
   * The application-specific snapshot format
   */
  uint32_t format;
  /*
   * Number of chunks in the snapshot
   */
  uint32_t chunks;
  /*
   * Arbitrary snapshot hash, equal only if identical
   */
  ProtobufCBinaryData hash;
  /*
   * Arbitrary application metadata
   */
  ProtobufCBinaryData metadata;
};
#define TENDERMINT__ABCI__SNAPSHOT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__abci__snapshot__descriptor) \
    , 0, 0, 0, {0,NULL}, {0,NULL} }


/* Tendermint__Abci__Request methods */
void   tendermint__abci__request__init
                     (Tendermint__Abci__Request         *message);
size_t tendermint__abci__request__get_packed_size
                     (const Tendermint__Abci__Request   *message);
size_t tendermint__abci__request__pack
                     (const Tendermint__Abci__Request   *message,
                      uint8_t             *out);
size_t tendermint__abci__request__pack_to_buffer
                     (const Tendermint__Abci__Request   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__Request *
       tendermint__abci__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request__free_unpacked
                     (Tendermint__Abci__Request *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestEcho methods */
void   tendermint__abci__request_echo__init
                     (Tendermint__Abci__RequestEcho         *message);
size_t tendermint__abci__request_echo__get_packed_size
                     (const Tendermint__Abci__RequestEcho   *message);
size_t tendermint__abci__request_echo__pack
                     (const Tendermint__Abci__RequestEcho   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_echo__pack_to_buffer
                     (const Tendermint__Abci__RequestEcho   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestEcho *
       tendermint__abci__request_echo__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_echo__free_unpacked
                     (Tendermint__Abci__RequestEcho *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestFlush methods */
void   tendermint__abci__request_flush__init
                     (Tendermint__Abci__RequestFlush         *message);
size_t tendermint__abci__request_flush__get_packed_size
                     (const Tendermint__Abci__RequestFlush   *message);
size_t tendermint__abci__request_flush__pack
                     (const Tendermint__Abci__RequestFlush   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_flush__pack_to_buffer
                     (const Tendermint__Abci__RequestFlush   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestFlush *
       tendermint__abci__request_flush__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_flush__free_unpacked
                     (Tendermint__Abci__RequestFlush *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestInfo methods */
void   tendermint__abci__request_info__init
                     (Tendermint__Abci__RequestInfo         *message);
size_t tendermint__abci__request_info__get_packed_size
                     (const Tendermint__Abci__RequestInfo   *message);
size_t tendermint__abci__request_info__pack
                     (const Tendermint__Abci__RequestInfo   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_info__pack_to_buffer
                     (const Tendermint__Abci__RequestInfo   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestInfo *
       tendermint__abci__request_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_info__free_unpacked
                     (Tendermint__Abci__RequestInfo *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestInitChain methods */
void   tendermint__abci__request_init_chain__init
                     (Tendermint__Abci__RequestInitChain         *message);
size_t tendermint__abci__request_init_chain__get_packed_size
                     (const Tendermint__Abci__RequestInitChain   *message);
size_t tendermint__abci__request_init_chain__pack
                     (const Tendermint__Abci__RequestInitChain   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_init_chain__pack_to_buffer
                     (const Tendermint__Abci__RequestInitChain   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestInitChain *
       tendermint__abci__request_init_chain__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_init_chain__free_unpacked
                     (Tendermint__Abci__RequestInitChain *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestQuery methods */
void   tendermint__abci__request_query__init
                     (Tendermint__Abci__RequestQuery         *message);
size_t tendermint__abci__request_query__get_packed_size
                     (const Tendermint__Abci__RequestQuery   *message);
size_t tendermint__abci__request_query__pack
                     (const Tendermint__Abci__RequestQuery   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_query__pack_to_buffer
                     (const Tendermint__Abci__RequestQuery   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestQuery *
       tendermint__abci__request_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_query__free_unpacked
                     (Tendermint__Abci__RequestQuery *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestBeginBlock methods */
void   tendermint__abci__request_begin_block__init
                     (Tendermint__Abci__RequestBeginBlock         *message);
size_t tendermint__abci__request_begin_block__get_packed_size
                     (const Tendermint__Abci__RequestBeginBlock   *message);
size_t tendermint__abci__request_begin_block__pack
                     (const Tendermint__Abci__RequestBeginBlock   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_begin_block__pack_to_buffer
                     (const Tendermint__Abci__RequestBeginBlock   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestBeginBlock *
       tendermint__abci__request_begin_block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_begin_block__free_unpacked
                     (Tendermint__Abci__RequestBeginBlock *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestCheckTx methods */
void   tendermint__abci__request_check_tx__init
                     (Tendermint__Abci__RequestCheckTx         *message);
size_t tendermint__abci__request_check_tx__get_packed_size
                     (const Tendermint__Abci__RequestCheckTx   *message);
size_t tendermint__abci__request_check_tx__pack
                     (const Tendermint__Abci__RequestCheckTx   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_check_tx__pack_to_buffer
                     (const Tendermint__Abci__RequestCheckTx   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestCheckTx *
       tendermint__abci__request_check_tx__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_check_tx__free_unpacked
                     (Tendermint__Abci__RequestCheckTx *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestDeliverTx methods */
void   tendermint__abci__request_deliver_tx__init
                     (Tendermint__Abci__RequestDeliverTx         *message);
size_t tendermint__abci__request_deliver_tx__get_packed_size
                     (const Tendermint__Abci__RequestDeliverTx   *message);
size_t tendermint__abci__request_deliver_tx__pack
                     (const Tendermint__Abci__RequestDeliverTx   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_deliver_tx__pack_to_buffer
                     (const Tendermint__Abci__RequestDeliverTx   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestDeliverTx *
       tendermint__abci__request_deliver_tx__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_deliver_tx__free_unpacked
                     (Tendermint__Abci__RequestDeliverTx *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestEndBlock methods */
void   tendermint__abci__request_end_block__init
                     (Tendermint__Abci__RequestEndBlock         *message);
size_t tendermint__abci__request_end_block__get_packed_size
                     (const Tendermint__Abci__RequestEndBlock   *message);
size_t tendermint__abci__request_end_block__pack
                     (const Tendermint__Abci__RequestEndBlock   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_end_block__pack_to_buffer
                     (const Tendermint__Abci__RequestEndBlock   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestEndBlock *
       tendermint__abci__request_end_block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_end_block__free_unpacked
                     (Tendermint__Abci__RequestEndBlock *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestCommit methods */
void   tendermint__abci__request_commit__init
                     (Tendermint__Abci__RequestCommit         *message);
size_t tendermint__abci__request_commit__get_packed_size
                     (const Tendermint__Abci__RequestCommit   *message);
size_t tendermint__abci__request_commit__pack
                     (const Tendermint__Abci__RequestCommit   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_commit__pack_to_buffer
                     (const Tendermint__Abci__RequestCommit   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestCommit *
       tendermint__abci__request_commit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_commit__free_unpacked
                     (Tendermint__Abci__RequestCommit *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestListSnapshots methods */
void   tendermint__abci__request_list_snapshots__init
                     (Tendermint__Abci__RequestListSnapshots         *message);
size_t tendermint__abci__request_list_snapshots__get_packed_size
                     (const Tendermint__Abci__RequestListSnapshots   *message);
size_t tendermint__abci__request_list_snapshots__pack
                     (const Tendermint__Abci__RequestListSnapshots   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_list_snapshots__pack_to_buffer
                     (const Tendermint__Abci__RequestListSnapshots   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestListSnapshots *
       tendermint__abci__request_list_snapshots__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_list_snapshots__free_unpacked
                     (Tendermint__Abci__RequestListSnapshots *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestOfferSnapshot methods */
void   tendermint__abci__request_offer_snapshot__init
                     (Tendermint__Abci__RequestOfferSnapshot         *message);
size_t tendermint__abci__request_offer_snapshot__get_packed_size
                     (const Tendermint__Abci__RequestOfferSnapshot   *message);
size_t tendermint__abci__request_offer_snapshot__pack
                     (const Tendermint__Abci__RequestOfferSnapshot   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_offer_snapshot__pack_to_buffer
                     (const Tendermint__Abci__RequestOfferSnapshot   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestOfferSnapshot *
       tendermint__abci__request_offer_snapshot__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_offer_snapshot__free_unpacked
                     (Tendermint__Abci__RequestOfferSnapshot *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestLoadSnapshotChunk methods */
void   tendermint__abci__request_load_snapshot_chunk__init
                     (Tendermint__Abci__RequestLoadSnapshotChunk         *message);
size_t tendermint__abci__request_load_snapshot_chunk__get_packed_size
                     (const Tendermint__Abci__RequestLoadSnapshotChunk   *message);
size_t tendermint__abci__request_load_snapshot_chunk__pack
                     (const Tendermint__Abci__RequestLoadSnapshotChunk   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_load_snapshot_chunk__pack_to_buffer
                     (const Tendermint__Abci__RequestLoadSnapshotChunk   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestLoadSnapshotChunk *
       tendermint__abci__request_load_snapshot_chunk__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_load_snapshot_chunk__free_unpacked
                     (Tendermint__Abci__RequestLoadSnapshotChunk *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestApplySnapshotChunk methods */
void   tendermint__abci__request_apply_snapshot_chunk__init
                     (Tendermint__Abci__RequestApplySnapshotChunk         *message);
size_t tendermint__abci__request_apply_snapshot_chunk__get_packed_size
                     (const Tendermint__Abci__RequestApplySnapshotChunk   *message);
size_t tendermint__abci__request_apply_snapshot_chunk__pack
                     (const Tendermint__Abci__RequestApplySnapshotChunk   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_apply_snapshot_chunk__pack_to_buffer
                     (const Tendermint__Abci__RequestApplySnapshotChunk   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestApplySnapshotChunk *
       tendermint__abci__request_apply_snapshot_chunk__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_apply_snapshot_chunk__free_unpacked
                     (Tendermint__Abci__RequestApplySnapshotChunk *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestPrepareProposal methods */
void   tendermint__abci__request_prepare_proposal__init
                     (Tendermint__Abci__RequestPrepareProposal         *message);
size_t tendermint__abci__request_prepare_proposal__get_packed_size
                     (const Tendermint__Abci__RequestPrepareProposal   *message);
size_t tendermint__abci__request_prepare_proposal__pack
                     (const Tendermint__Abci__RequestPrepareProposal   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_prepare_proposal__pack_to_buffer
                     (const Tendermint__Abci__RequestPrepareProposal   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestPrepareProposal *
       tendermint__abci__request_prepare_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_prepare_proposal__free_unpacked
                     (Tendermint__Abci__RequestPrepareProposal *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__RequestProcessProposal methods */
void   tendermint__abci__request_process_proposal__init
                     (Tendermint__Abci__RequestProcessProposal         *message);
size_t tendermint__abci__request_process_proposal__get_packed_size
                     (const Tendermint__Abci__RequestProcessProposal   *message);
size_t tendermint__abci__request_process_proposal__pack
                     (const Tendermint__Abci__RequestProcessProposal   *message,
                      uint8_t             *out);
size_t tendermint__abci__request_process_proposal__pack_to_buffer
                     (const Tendermint__Abci__RequestProcessProposal   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__RequestProcessProposal *
       tendermint__abci__request_process_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__request_process_proposal__free_unpacked
                     (Tendermint__Abci__RequestProcessProposal *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__Response methods */
void   tendermint__abci__response__init
                     (Tendermint__Abci__Response         *message);
size_t tendermint__abci__response__get_packed_size
                     (const Tendermint__Abci__Response   *message);
size_t tendermint__abci__response__pack
                     (const Tendermint__Abci__Response   *message,
                      uint8_t             *out);
size_t tendermint__abci__response__pack_to_buffer
                     (const Tendermint__Abci__Response   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__Response *
       tendermint__abci__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response__free_unpacked
                     (Tendermint__Abci__Response *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseException methods */
void   tendermint__abci__response_exception__init
                     (Tendermint__Abci__ResponseException         *message);
size_t tendermint__abci__response_exception__get_packed_size
                     (const Tendermint__Abci__ResponseException   *message);
size_t tendermint__abci__response_exception__pack
                     (const Tendermint__Abci__ResponseException   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_exception__pack_to_buffer
                     (const Tendermint__Abci__ResponseException   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseException *
       tendermint__abci__response_exception__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_exception__free_unpacked
                     (Tendermint__Abci__ResponseException *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseEcho methods */
void   tendermint__abci__response_echo__init
                     (Tendermint__Abci__ResponseEcho         *message);
size_t tendermint__abci__response_echo__get_packed_size
                     (const Tendermint__Abci__ResponseEcho   *message);
size_t tendermint__abci__response_echo__pack
                     (const Tendermint__Abci__ResponseEcho   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_echo__pack_to_buffer
                     (const Tendermint__Abci__ResponseEcho   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseEcho *
       tendermint__abci__response_echo__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_echo__free_unpacked
                     (Tendermint__Abci__ResponseEcho *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseFlush methods */
void   tendermint__abci__response_flush__init
                     (Tendermint__Abci__ResponseFlush         *message);
size_t tendermint__abci__response_flush__get_packed_size
                     (const Tendermint__Abci__ResponseFlush   *message);
size_t tendermint__abci__response_flush__pack
                     (const Tendermint__Abci__ResponseFlush   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_flush__pack_to_buffer
                     (const Tendermint__Abci__ResponseFlush   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseFlush *
       tendermint__abci__response_flush__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_flush__free_unpacked
                     (Tendermint__Abci__ResponseFlush *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseInfo methods */
void   tendermint__abci__response_info__init
                     (Tendermint__Abci__ResponseInfo         *message);
size_t tendermint__abci__response_info__get_packed_size
                     (const Tendermint__Abci__ResponseInfo   *message);
size_t tendermint__abci__response_info__pack
                     (const Tendermint__Abci__ResponseInfo   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_info__pack_to_buffer
                     (const Tendermint__Abci__ResponseInfo   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseInfo *
       tendermint__abci__response_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_info__free_unpacked
                     (Tendermint__Abci__ResponseInfo *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseInitChain methods */
void   tendermint__abci__response_init_chain__init
                     (Tendermint__Abci__ResponseInitChain         *message);
size_t tendermint__abci__response_init_chain__get_packed_size
                     (const Tendermint__Abci__ResponseInitChain   *message);
size_t tendermint__abci__response_init_chain__pack
                     (const Tendermint__Abci__ResponseInitChain   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_init_chain__pack_to_buffer
                     (const Tendermint__Abci__ResponseInitChain   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseInitChain *
       tendermint__abci__response_init_chain__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_init_chain__free_unpacked
                     (Tendermint__Abci__ResponseInitChain *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseQuery methods */
void   tendermint__abci__response_query__init
                     (Tendermint__Abci__ResponseQuery         *message);
size_t tendermint__abci__response_query__get_packed_size
                     (const Tendermint__Abci__ResponseQuery   *message);
size_t tendermint__abci__response_query__pack
                     (const Tendermint__Abci__ResponseQuery   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_query__pack_to_buffer
                     (const Tendermint__Abci__ResponseQuery   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseQuery *
       tendermint__abci__response_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_query__free_unpacked
                     (Tendermint__Abci__ResponseQuery *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseBeginBlock methods */
void   tendermint__abci__response_begin_block__init
                     (Tendermint__Abci__ResponseBeginBlock         *message);
size_t tendermint__abci__response_begin_block__get_packed_size
                     (const Tendermint__Abci__ResponseBeginBlock   *message);
size_t tendermint__abci__response_begin_block__pack
                     (const Tendermint__Abci__ResponseBeginBlock   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_begin_block__pack_to_buffer
                     (const Tendermint__Abci__ResponseBeginBlock   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseBeginBlock *
       tendermint__abci__response_begin_block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_begin_block__free_unpacked
                     (Tendermint__Abci__ResponseBeginBlock *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseCheckTx methods */
void   tendermint__abci__response_check_tx__init
                     (Tendermint__Abci__ResponseCheckTx         *message);
size_t tendermint__abci__response_check_tx__get_packed_size
                     (const Tendermint__Abci__ResponseCheckTx   *message);
size_t tendermint__abci__response_check_tx__pack
                     (const Tendermint__Abci__ResponseCheckTx   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_check_tx__pack_to_buffer
                     (const Tendermint__Abci__ResponseCheckTx   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseCheckTx *
       tendermint__abci__response_check_tx__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_check_tx__free_unpacked
                     (Tendermint__Abci__ResponseCheckTx *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseDeliverTx methods */
void   tendermint__abci__response_deliver_tx__init
                     (Tendermint__Abci__ResponseDeliverTx         *message);
size_t tendermint__abci__response_deliver_tx__get_packed_size
                     (const Tendermint__Abci__ResponseDeliverTx   *message);
size_t tendermint__abci__response_deliver_tx__pack
                     (const Tendermint__Abci__ResponseDeliverTx   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_deliver_tx__pack_to_buffer
                     (const Tendermint__Abci__ResponseDeliverTx   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseDeliverTx *
       tendermint__abci__response_deliver_tx__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_deliver_tx__free_unpacked
                     (Tendermint__Abci__ResponseDeliverTx *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseEndBlock methods */
void   tendermint__abci__response_end_block__init
                     (Tendermint__Abci__ResponseEndBlock         *message);
size_t tendermint__abci__response_end_block__get_packed_size
                     (const Tendermint__Abci__ResponseEndBlock   *message);
size_t tendermint__abci__response_end_block__pack
                     (const Tendermint__Abci__ResponseEndBlock   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_end_block__pack_to_buffer
                     (const Tendermint__Abci__ResponseEndBlock   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseEndBlock *
       tendermint__abci__response_end_block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_end_block__free_unpacked
                     (Tendermint__Abci__ResponseEndBlock *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseCommit methods */
void   tendermint__abci__response_commit__init
                     (Tendermint__Abci__ResponseCommit         *message);
size_t tendermint__abci__response_commit__get_packed_size
                     (const Tendermint__Abci__ResponseCommit   *message);
size_t tendermint__abci__response_commit__pack
                     (const Tendermint__Abci__ResponseCommit   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_commit__pack_to_buffer
                     (const Tendermint__Abci__ResponseCommit   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseCommit *
       tendermint__abci__response_commit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_commit__free_unpacked
                     (Tendermint__Abci__ResponseCommit *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseListSnapshots methods */
void   tendermint__abci__response_list_snapshots__init
                     (Tendermint__Abci__ResponseListSnapshots         *message);
size_t tendermint__abci__response_list_snapshots__get_packed_size
                     (const Tendermint__Abci__ResponseListSnapshots   *message);
size_t tendermint__abci__response_list_snapshots__pack
                     (const Tendermint__Abci__ResponseListSnapshots   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_list_snapshots__pack_to_buffer
                     (const Tendermint__Abci__ResponseListSnapshots   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseListSnapshots *
       tendermint__abci__response_list_snapshots__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_list_snapshots__free_unpacked
                     (Tendermint__Abci__ResponseListSnapshots *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseOfferSnapshot methods */
void   tendermint__abci__response_offer_snapshot__init
                     (Tendermint__Abci__ResponseOfferSnapshot         *message);
size_t tendermint__abci__response_offer_snapshot__get_packed_size
                     (const Tendermint__Abci__ResponseOfferSnapshot   *message);
size_t tendermint__abci__response_offer_snapshot__pack
                     (const Tendermint__Abci__ResponseOfferSnapshot   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_offer_snapshot__pack_to_buffer
                     (const Tendermint__Abci__ResponseOfferSnapshot   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseOfferSnapshot *
       tendermint__abci__response_offer_snapshot__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_offer_snapshot__free_unpacked
                     (Tendermint__Abci__ResponseOfferSnapshot *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseLoadSnapshotChunk methods */
void   tendermint__abci__response_load_snapshot_chunk__init
                     (Tendermint__Abci__ResponseLoadSnapshotChunk         *message);
size_t tendermint__abci__response_load_snapshot_chunk__get_packed_size
                     (const Tendermint__Abci__ResponseLoadSnapshotChunk   *message);
size_t tendermint__abci__response_load_snapshot_chunk__pack
                     (const Tendermint__Abci__ResponseLoadSnapshotChunk   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_load_snapshot_chunk__pack_to_buffer
                     (const Tendermint__Abci__ResponseLoadSnapshotChunk   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseLoadSnapshotChunk *
       tendermint__abci__response_load_snapshot_chunk__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_load_snapshot_chunk__free_unpacked
                     (Tendermint__Abci__ResponseLoadSnapshotChunk *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseApplySnapshotChunk methods */
void   tendermint__abci__response_apply_snapshot_chunk__init
                     (Tendermint__Abci__ResponseApplySnapshotChunk         *message);
size_t tendermint__abci__response_apply_snapshot_chunk__get_packed_size
                     (const Tendermint__Abci__ResponseApplySnapshotChunk   *message);
size_t tendermint__abci__response_apply_snapshot_chunk__pack
                     (const Tendermint__Abci__ResponseApplySnapshotChunk   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_apply_snapshot_chunk__pack_to_buffer
                     (const Tendermint__Abci__ResponseApplySnapshotChunk   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseApplySnapshotChunk *
       tendermint__abci__response_apply_snapshot_chunk__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_apply_snapshot_chunk__free_unpacked
                     (Tendermint__Abci__ResponseApplySnapshotChunk *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponsePrepareProposal methods */
void   tendermint__abci__response_prepare_proposal__init
                     (Tendermint__Abci__ResponsePrepareProposal         *message);
size_t tendermint__abci__response_prepare_proposal__get_packed_size
                     (const Tendermint__Abci__ResponsePrepareProposal   *message);
size_t tendermint__abci__response_prepare_proposal__pack
                     (const Tendermint__Abci__ResponsePrepareProposal   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_prepare_proposal__pack_to_buffer
                     (const Tendermint__Abci__ResponsePrepareProposal   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponsePrepareProposal *
       tendermint__abci__response_prepare_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_prepare_proposal__free_unpacked
                     (Tendermint__Abci__ResponsePrepareProposal *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ResponseProcessProposal methods */
void   tendermint__abci__response_process_proposal__init
                     (Tendermint__Abci__ResponseProcessProposal         *message);
size_t tendermint__abci__response_process_proposal__get_packed_size
                     (const Tendermint__Abci__ResponseProcessProposal   *message);
size_t tendermint__abci__response_process_proposal__pack
                     (const Tendermint__Abci__ResponseProcessProposal   *message,
                      uint8_t             *out);
size_t tendermint__abci__response_process_proposal__pack_to_buffer
                     (const Tendermint__Abci__ResponseProcessProposal   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ResponseProcessProposal *
       tendermint__abci__response_process_proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__response_process_proposal__free_unpacked
                     (Tendermint__Abci__ResponseProcessProposal *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__CommitInfo methods */
void   tendermint__abci__commit_info__init
                     (Tendermint__Abci__CommitInfo         *message);
size_t tendermint__abci__commit_info__get_packed_size
                     (const Tendermint__Abci__CommitInfo   *message);
size_t tendermint__abci__commit_info__pack
                     (const Tendermint__Abci__CommitInfo   *message,
                      uint8_t             *out);
size_t tendermint__abci__commit_info__pack_to_buffer
                     (const Tendermint__Abci__CommitInfo   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__CommitInfo *
       tendermint__abci__commit_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__commit_info__free_unpacked
                     (Tendermint__Abci__CommitInfo *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ExtendedCommitInfo methods */
void   tendermint__abci__extended_commit_info__init
                     (Tendermint__Abci__ExtendedCommitInfo         *message);
size_t tendermint__abci__extended_commit_info__get_packed_size
                     (const Tendermint__Abci__ExtendedCommitInfo   *message);
size_t tendermint__abci__extended_commit_info__pack
                     (const Tendermint__Abci__ExtendedCommitInfo   *message,
                      uint8_t             *out);
size_t tendermint__abci__extended_commit_info__pack_to_buffer
                     (const Tendermint__Abci__ExtendedCommitInfo   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ExtendedCommitInfo *
       tendermint__abci__extended_commit_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__extended_commit_info__free_unpacked
                     (Tendermint__Abci__ExtendedCommitInfo *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__Event methods */
void   tendermint__abci__event__init
                     (Tendermint__Abci__Event         *message);
size_t tendermint__abci__event__get_packed_size
                     (const Tendermint__Abci__Event   *message);
size_t tendermint__abci__event__pack
                     (const Tendermint__Abci__Event   *message,
                      uint8_t             *out);
size_t tendermint__abci__event__pack_to_buffer
                     (const Tendermint__Abci__Event   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__Event *
       tendermint__abci__event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__event__free_unpacked
                     (Tendermint__Abci__Event *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__EventAttribute methods */
void   tendermint__abci__event_attribute__init
                     (Tendermint__Abci__EventAttribute         *message);
size_t tendermint__abci__event_attribute__get_packed_size
                     (const Tendermint__Abci__EventAttribute   *message);
size_t tendermint__abci__event_attribute__pack
                     (const Tendermint__Abci__EventAttribute   *message,
                      uint8_t             *out);
size_t tendermint__abci__event_attribute__pack_to_buffer
                     (const Tendermint__Abci__EventAttribute   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__EventAttribute *
       tendermint__abci__event_attribute__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__event_attribute__free_unpacked
                     (Tendermint__Abci__EventAttribute *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__TxResult methods */
void   tendermint__abci__tx_result__init
                     (Tendermint__Abci__TxResult         *message);
size_t tendermint__abci__tx_result__get_packed_size
                     (const Tendermint__Abci__TxResult   *message);
size_t tendermint__abci__tx_result__pack
                     (const Tendermint__Abci__TxResult   *message,
                      uint8_t             *out);
size_t tendermint__abci__tx_result__pack_to_buffer
                     (const Tendermint__Abci__TxResult   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__TxResult *
       tendermint__abci__tx_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__tx_result__free_unpacked
                     (Tendermint__Abci__TxResult *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__Validator methods */
void   tendermint__abci__validator__init
                     (Tendermint__Abci__Validator         *message);
size_t tendermint__abci__validator__get_packed_size
                     (const Tendermint__Abci__Validator   *message);
size_t tendermint__abci__validator__pack
                     (const Tendermint__Abci__Validator   *message,
                      uint8_t             *out);
size_t tendermint__abci__validator__pack_to_buffer
                     (const Tendermint__Abci__Validator   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__Validator *
       tendermint__abci__validator__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__validator__free_unpacked
                     (Tendermint__Abci__Validator *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ValidatorUpdate methods */
void   tendermint__abci__validator_update__init
                     (Tendermint__Abci__ValidatorUpdate         *message);
size_t tendermint__abci__validator_update__get_packed_size
                     (const Tendermint__Abci__ValidatorUpdate   *message);
size_t tendermint__abci__validator_update__pack
                     (const Tendermint__Abci__ValidatorUpdate   *message,
                      uint8_t             *out);
size_t tendermint__abci__validator_update__pack_to_buffer
                     (const Tendermint__Abci__ValidatorUpdate   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ValidatorUpdate *
       tendermint__abci__validator_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__validator_update__free_unpacked
                     (Tendermint__Abci__ValidatorUpdate *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__VoteInfo methods */
void   tendermint__abci__vote_info__init
                     (Tendermint__Abci__VoteInfo         *message);
size_t tendermint__abci__vote_info__get_packed_size
                     (const Tendermint__Abci__VoteInfo   *message);
size_t tendermint__abci__vote_info__pack
                     (const Tendermint__Abci__VoteInfo   *message,
                      uint8_t             *out);
size_t tendermint__abci__vote_info__pack_to_buffer
                     (const Tendermint__Abci__VoteInfo   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__VoteInfo *
       tendermint__abci__vote_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__vote_info__free_unpacked
                     (Tendermint__Abci__VoteInfo *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__ExtendedVoteInfo methods */
void   tendermint__abci__extended_vote_info__init
                     (Tendermint__Abci__ExtendedVoteInfo         *message);
size_t tendermint__abci__extended_vote_info__get_packed_size
                     (const Tendermint__Abci__ExtendedVoteInfo   *message);
size_t tendermint__abci__extended_vote_info__pack
                     (const Tendermint__Abci__ExtendedVoteInfo   *message,
                      uint8_t             *out);
size_t tendermint__abci__extended_vote_info__pack_to_buffer
                     (const Tendermint__Abci__ExtendedVoteInfo   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__ExtendedVoteInfo *
       tendermint__abci__extended_vote_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__extended_vote_info__free_unpacked
                     (Tendermint__Abci__ExtendedVoteInfo *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__Misbehavior methods */
void   tendermint__abci__misbehavior__init
                     (Tendermint__Abci__Misbehavior         *message);
size_t tendermint__abci__misbehavior__get_packed_size
                     (const Tendermint__Abci__Misbehavior   *message);
size_t tendermint__abci__misbehavior__pack
                     (const Tendermint__Abci__Misbehavior   *message,
                      uint8_t             *out);
size_t tendermint__abci__misbehavior__pack_to_buffer
                     (const Tendermint__Abci__Misbehavior   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__Misbehavior *
       tendermint__abci__misbehavior__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__misbehavior__free_unpacked
                     (Tendermint__Abci__Misbehavior *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Abci__Snapshot methods */
void   tendermint__abci__snapshot__init
                     (Tendermint__Abci__Snapshot         *message);
size_t tendermint__abci__snapshot__get_packed_size
                     (const Tendermint__Abci__Snapshot   *message);
size_t tendermint__abci__snapshot__pack
                     (const Tendermint__Abci__Snapshot   *message,
                      uint8_t             *out);
size_t tendermint__abci__snapshot__pack_to_buffer
                     (const Tendermint__Abci__Snapshot   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Abci__Snapshot *
       tendermint__abci__snapshot__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__abci__snapshot__free_unpacked
                     (Tendermint__Abci__Snapshot *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tendermint__Abci__Request_Closure)
                 (const Tendermint__Abci__Request *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestEcho_Closure)
                 (const Tendermint__Abci__RequestEcho *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestFlush_Closure)
                 (const Tendermint__Abci__RequestFlush *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestInfo_Closure)
                 (const Tendermint__Abci__RequestInfo *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestInitChain_Closure)
                 (const Tendermint__Abci__RequestInitChain *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestQuery_Closure)
                 (const Tendermint__Abci__RequestQuery *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestBeginBlock_Closure)
                 (const Tendermint__Abci__RequestBeginBlock *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestCheckTx_Closure)
                 (const Tendermint__Abci__RequestCheckTx *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestDeliverTx_Closure)
                 (const Tendermint__Abci__RequestDeliverTx *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestEndBlock_Closure)
                 (const Tendermint__Abci__RequestEndBlock *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestCommit_Closure)
                 (const Tendermint__Abci__RequestCommit *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestListSnapshots_Closure)
                 (const Tendermint__Abci__RequestListSnapshots *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestOfferSnapshot_Closure)
                 (const Tendermint__Abci__RequestOfferSnapshot *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestLoadSnapshotChunk_Closure)
                 (const Tendermint__Abci__RequestLoadSnapshotChunk *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestApplySnapshotChunk_Closure)
                 (const Tendermint__Abci__RequestApplySnapshotChunk *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestPrepareProposal_Closure)
                 (const Tendermint__Abci__RequestPrepareProposal *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__RequestProcessProposal_Closure)
                 (const Tendermint__Abci__RequestProcessProposal *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__Response_Closure)
                 (const Tendermint__Abci__Response *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseException_Closure)
                 (const Tendermint__Abci__ResponseException *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseEcho_Closure)
                 (const Tendermint__Abci__ResponseEcho *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseFlush_Closure)
                 (const Tendermint__Abci__ResponseFlush *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseInfo_Closure)
                 (const Tendermint__Abci__ResponseInfo *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseInitChain_Closure)
                 (const Tendermint__Abci__ResponseInitChain *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseQuery_Closure)
                 (const Tendermint__Abci__ResponseQuery *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseBeginBlock_Closure)
                 (const Tendermint__Abci__ResponseBeginBlock *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseCheckTx_Closure)
                 (const Tendermint__Abci__ResponseCheckTx *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseDeliverTx_Closure)
                 (const Tendermint__Abci__ResponseDeliverTx *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseEndBlock_Closure)
                 (const Tendermint__Abci__ResponseEndBlock *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseCommit_Closure)
                 (const Tendermint__Abci__ResponseCommit *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseListSnapshots_Closure)
                 (const Tendermint__Abci__ResponseListSnapshots *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseOfferSnapshot_Closure)
                 (const Tendermint__Abci__ResponseOfferSnapshot *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseLoadSnapshotChunk_Closure)
                 (const Tendermint__Abci__ResponseLoadSnapshotChunk *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseApplySnapshotChunk_Closure)
                 (const Tendermint__Abci__ResponseApplySnapshotChunk *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponsePrepareProposal_Closure)
                 (const Tendermint__Abci__ResponsePrepareProposal *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ResponseProcessProposal_Closure)
                 (const Tendermint__Abci__ResponseProcessProposal *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__CommitInfo_Closure)
                 (const Tendermint__Abci__CommitInfo *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ExtendedCommitInfo_Closure)
                 (const Tendermint__Abci__ExtendedCommitInfo *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__Event_Closure)
                 (const Tendermint__Abci__Event *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__EventAttribute_Closure)
                 (const Tendermint__Abci__EventAttribute *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__TxResult_Closure)
                 (const Tendermint__Abci__TxResult *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__Validator_Closure)
                 (const Tendermint__Abci__Validator *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ValidatorUpdate_Closure)
                 (const Tendermint__Abci__ValidatorUpdate *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__VoteInfo_Closure)
                 (const Tendermint__Abci__VoteInfo *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__ExtendedVoteInfo_Closure)
                 (const Tendermint__Abci__ExtendedVoteInfo *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__Misbehavior_Closure)
                 (const Tendermint__Abci__Misbehavior *message,
                  void *closure_data);
typedef void (*Tendermint__Abci__Snapshot_Closure)
                 (const Tendermint__Abci__Snapshot *message,
                  void *closure_data);

/* --- services --- */

typedef struct Tendermint__Abci__ABCIApplication_Service Tendermint__Abci__ABCIApplication_Service;
struct Tendermint__Abci__ABCIApplication_Service
{
  ProtobufCService base;
  void (*echo)(Tendermint__Abci__ABCIApplication_Service *service,
               const Tendermint__Abci__RequestEcho *input,
               Tendermint__Abci__ResponseEcho_Closure closure,
               void *closure_data);
  void (*flush)(Tendermint__Abci__ABCIApplication_Service *service,
                const Tendermint__Abci__RequestFlush *input,
                Tendermint__Abci__ResponseFlush_Closure closure,
                void *closure_data);
  void (*info)(Tendermint__Abci__ABCIApplication_Service *service,
               const Tendermint__Abci__RequestInfo *input,
               Tendermint__Abci__ResponseInfo_Closure closure,
               void *closure_data);
  void (*deliver_tx)(Tendermint__Abci__ABCIApplication_Service *service,
                     const Tendermint__Abci__RequestDeliverTx *input,
                     Tendermint__Abci__ResponseDeliverTx_Closure closure,
                     void *closure_data);
  void (*check_tx)(Tendermint__Abci__ABCIApplication_Service *service,
                   const Tendermint__Abci__RequestCheckTx *input,
                   Tendermint__Abci__ResponseCheckTx_Closure closure,
                   void *closure_data);
  void (*query)(Tendermint__Abci__ABCIApplication_Service *service,
                const Tendermint__Abci__RequestQuery *input,
                Tendermint__Abci__ResponseQuery_Closure closure,
                void *closure_data);
  void (*commit)(Tendermint__Abci__ABCIApplication_Service *service,
                 const Tendermint__Abci__RequestCommit *input,
                 Tendermint__Abci__ResponseCommit_Closure closure,
                 void *closure_data);
  void (*init_chain)(Tendermint__Abci__ABCIApplication_Service *service,
                     const Tendermint__Abci__RequestInitChain *input,
                     Tendermint__Abci__ResponseInitChain_Closure closure,
                     void *closure_data);
  void (*begin_block)(Tendermint__Abci__ABCIApplication_Service *service,
                      const Tendermint__Abci__RequestBeginBlock *input,
                      Tendermint__Abci__ResponseBeginBlock_Closure closure,
                      void *closure_data);
  void (*end_block)(Tendermint__Abci__ABCIApplication_Service *service,
                    const Tendermint__Abci__RequestEndBlock *input,
                    Tendermint__Abci__ResponseEndBlock_Closure closure,
                    void *closure_data);
  void (*list_snapshots)(Tendermint__Abci__ABCIApplication_Service *service,
                         const Tendermint__Abci__RequestListSnapshots *input,
                         Tendermint__Abci__ResponseListSnapshots_Closure closure,
                         void *closure_data);
  void (*offer_snapshot)(Tendermint__Abci__ABCIApplication_Service *service,
                         const Tendermint__Abci__RequestOfferSnapshot *input,
                         Tendermint__Abci__ResponseOfferSnapshot_Closure closure,
                         void *closure_data);
  void (*load_snapshot_chunk)(Tendermint__Abci__ABCIApplication_Service *service,
                              const Tendermint__Abci__RequestLoadSnapshotChunk *input,
                              Tendermint__Abci__ResponseLoadSnapshotChunk_Closure closure,
                              void *closure_data);
  void (*apply_snapshot_chunk)(Tendermint__Abci__ABCIApplication_Service *service,
                               const Tendermint__Abci__RequestApplySnapshotChunk *input,
                               Tendermint__Abci__ResponseApplySnapshotChunk_Closure closure,
                               void *closure_data);
  void (*prepare_proposal)(Tendermint__Abci__ABCIApplication_Service *service,
                           const Tendermint__Abci__RequestPrepareProposal *input,
                           Tendermint__Abci__ResponsePrepareProposal_Closure closure,
                           void *closure_data);
  void (*process_proposal)(Tendermint__Abci__ABCIApplication_Service *service,
                           const Tendermint__Abci__RequestProcessProposal *input,
                           Tendermint__Abci__ResponseProcessProposal_Closure closure,
                           void *closure_data);
};
typedef void (*Tendermint__Abci__ABCIApplication_ServiceDestroy)(Tendermint__Abci__ABCIApplication_Service *);
void tendermint__abci__abciapplication__init (Tendermint__Abci__ABCIApplication_Service *service,
                                              Tendermint__Abci__ABCIApplication_ServiceDestroy destroy);
#define TENDERMINT__ABCI__ABCIAPPLICATION__BASE_INIT \
    { &tendermint__abci__abciapplication__descriptor, protobuf_c_service_invoke_internal, NULL }
#define TENDERMINT__ABCI__ABCIAPPLICATION__INIT(function_prefix__) \
    { TENDERMINT__ABCI__ABCIAPPLICATION__BASE_INIT,\
      function_prefix__ ## echo,\
      function_prefix__ ## flush,\
      function_prefix__ ## info,\
      function_prefix__ ## deliver_tx,\
      function_prefix__ ## check_tx,\
      function_prefix__ ## query,\
      function_prefix__ ## commit,\
      function_prefix__ ## init_chain,\
      function_prefix__ ## begin_block,\
      function_prefix__ ## end_block,\
      function_prefix__ ## list_snapshots,\
      function_prefix__ ## offer_snapshot,\
      function_prefix__ ## load_snapshot_chunk,\
      function_prefix__ ## apply_snapshot_chunk,\
      function_prefix__ ## prepare_proposal,\
      function_prefix__ ## process_proposal  }
void tendermint__abci__abciapplication__echo(ProtobufCService *service,
                                             const Tendermint__Abci__RequestEcho *input,
                                             Tendermint__Abci__ResponseEcho_Closure closure,
                                             void *closure_data);
void tendermint__abci__abciapplication__flush(ProtobufCService *service,
                                              const Tendermint__Abci__RequestFlush *input,
                                              Tendermint__Abci__ResponseFlush_Closure closure,
                                              void *closure_data);
void tendermint__abci__abciapplication__info(ProtobufCService *service,
                                             const Tendermint__Abci__RequestInfo *input,
                                             Tendermint__Abci__ResponseInfo_Closure closure,
                                             void *closure_data);
void tendermint__abci__abciapplication__deliver_tx(ProtobufCService *service,
                                                   const Tendermint__Abci__RequestDeliverTx *input,
                                                   Tendermint__Abci__ResponseDeliverTx_Closure closure,
                                                   void *closure_data);
void tendermint__abci__abciapplication__check_tx(ProtobufCService *service,
                                                 const Tendermint__Abci__RequestCheckTx *input,
                                                 Tendermint__Abci__ResponseCheckTx_Closure closure,
                                                 void *closure_data);
void tendermint__abci__abciapplication__query(ProtobufCService *service,
                                              const Tendermint__Abci__RequestQuery *input,
                                              Tendermint__Abci__ResponseQuery_Closure closure,
                                              void *closure_data);
void tendermint__abci__abciapplication__commit(ProtobufCService *service,
                                               const Tendermint__Abci__RequestCommit *input,
                                               Tendermint__Abci__ResponseCommit_Closure closure,
                                               void *closure_data);
void tendermint__abci__abciapplication__init_chain(ProtobufCService *service,
                                                   const Tendermint__Abci__RequestInitChain *input,
                                                   Tendermint__Abci__ResponseInitChain_Closure closure,
                                                   void *closure_data);
void tendermint__abci__abciapplication__begin_block(ProtobufCService *service,
                                                    const Tendermint__Abci__RequestBeginBlock *input,
                                                    Tendermint__Abci__ResponseBeginBlock_Closure closure,
                                                    void *closure_data);
void tendermint__abci__abciapplication__end_block(ProtobufCService *service,
                                                  const Tendermint__Abci__RequestEndBlock *input,
                                                  Tendermint__Abci__ResponseEndBlock_Closure closure,
                                                  void *closure_data);
void tendermint__abci__abciapplication__list_snapshots(ProtobufCService *service,
                                                       const Tendermint__Abci__RequestListSnapshots *input,
                                                       Tendermint__Abci__ResponseListSnapshots_Closure closure,
                                                       void *closure_data);
void tendermint__abci__abciapplication__offer_snapshot(ProtobufCService *service,
                                                       const Tendermint__Abci__RequestOfferSnapshot *input,
                                                       Tendermint__Abci__ResponseOfferSnapshot_Closure closure,
                                                       void *closure_data);
void tendermint__abci__abciapplication__load_snapshot_chunk(ProtobufCService *service,
                                                            const Tendermint__Abci__RequestLoadSnapshotChunk *input,
                                                            Tendermint__Abci__ResponseLoadSnapshotChunk_Closure closure,
                                                            void *closure_data);
void tendermint__abci__abciapplication__apply_snapshot_chunk(ProtobufCService *service,
                                                             const Tendermint__Abci__RequestApplySnapshotChunk *input,
                                                             Tendermint__Abci__ResponseApplySnapshotChunk_Closure closure,
                                                             void *closure_data);
void tendermint__abci__abciapplication__prepare_proposal(ProtobufCService *service,
                                                         const Tendermint__Abci__RequestPrepareProposal *input,
                                                         Tendermint__Abci__ResponsePrepareProposal_Closure closure,
                                                         void *closure_data);
void tendermint__abci__abciapplication__process_proposal(ProtobufCService *service,
                                                         const Tendermint__Abci__RequestProcessProposal *input,
                                                         Tendermint__Abci__ResponseProcessProposal_Closure closure,
                                                         void *closure_data);

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    tendermint__abci__check_tx_type__descriptor;
extern const ProtobufCEnumDescriptor    tendermint__abci__misbehavior_type__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_echo__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_flush__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_info__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_init_chain__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_query__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_begin_block__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_check_tx__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_deliver_tx__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_end_block__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_commit__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_list_snapshots__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_offer_snapshot__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_load_snapshot_chunk__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_apply_snapshot_chunk__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_prepare_proposal__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__request_process_proposal__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_exception__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_echo__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_flush__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_info__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_init_chain__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_query__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_begin_block__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_check_tx__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_deliver_tx__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_end_block__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_commit__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_list_snapshots__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_offer_snapshot__descriptor;
extern const ProtobufCEnumDescriptor    tendermint__abci__response_offer_snapshot__result__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_load_snapshot_chunk__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_apply_snapshot_chunk__descriptor;
extern const ProtobufCEnumDescriptor    tendermint__abci__response_apply_snapshot_chunk__result__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_prepare_proposal__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__response_process_proposal__descriptor;
extern const ProtobufCEnumDescriptor    tendermint__abci__response_process_proposal__proposal_status__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__commit_info__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__extended_commit_info__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__event__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__event_attribute__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__tx_result__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__validator__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__validator_update__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__vote_info__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__extended_vote_info__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__misbehavior__descriptor;
extern const ProtobufCMessageDescriptor tendermint__abci__snapshot__descriptor;
extern const ProtobufCServiceDescriptor tendermint__abci__abciapplication__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tendermint_2fabci_2ftypes_2eproto__INCLUDED */
