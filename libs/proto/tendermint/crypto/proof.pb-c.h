/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tendermint/crypto/proof.proto */

#ifndef PROTOBUF_C_tendermint_2fcrypto_2fproof_2eproto__INCLUDED
#define PROTOBUF_C_tendermint_2fcrypto_2fproof_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "gogoproto/gogo.pb-c.h"

typedef struct Tendermint__Crypto__Proof Tendermint__Crypto__Proof;
typedef struct Tendermint__Crypto__ValueOp Tendermint__Crypto__ValueOp;
typedef struct Tendermint__Crypto__DominoOp Tendermint__Crypto__DominoOp;
typedef struct Tendermint__Crypto__ProofOp Tendermint__Crypto__ProofOp;
typedef struct Tendermint__Crypto__ProofOps Tendermint__Crypto__ProofOps;


/* --- enums --- */


/* --- messages --- */

struct  Tendermint__Crypto__Proof
{
  ProtobufCMessage base;
  int64_t total;
  int64_t index;
  ProtobufCBinaryData leaf_hash;
  size_t n_aunts;
  ProtobufCBinaryData *aunts;
};
#define TENDERMINT__CRYPTO__PROOF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__crypto__proof__descriptor) \
    , 0, 0, {0,NULL}, 0,NULL }


struct  Tendermint__Crypto__ValueOp
{
  ProtobufCMessage base;
  /*
   * Encoded in ProofOp.Key.
   */
  ProtobufCBinaryData key;
  /*
   * To encode in ProofOp.Data
   */
  Tendermint__Crypto__Proof *proof;
};
#define TENDERMINT__CRYPTO__VALUE_OP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__crypto__value_op__descriptor) \
    , {0,NULL}, NULL }


struct  Tendermint__Crypto__DominoOp
{
  ProtobufCMessage base;
  char *key;
  char *input;
  char *output;
};
#define TENDERMINT__CRYPTO__DOMINO_OP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__crypto__domino_op__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * ProofOp defines an operation used for calculating Merkle root
 * The data could be arbitrary format, providing nessecary data
 * for example neighbouring node hash
 */
struct  Tendermint__Crypto__ProofOp
{
  ProtobufCMessage base;
  char *type;
  ProtobufCBinaryData key;
  ProtobufCBinaryData data;
};
#define TENDERMINT__CRYPTO__PROOF_OP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__crypto__proof_op__descriptor) \
    , (char *)protobuf_c_empty_string, {0,NULL}, {0,NULL} }


/*
 * ProofOps is Merkle proof defined by the list of ProofOps
 */
struct  Tendermint__Crypto__ProofOps
{
  ProtobufCMessage base;
  size_t n_ops;
  Tendermint__Crypto__ProofOp **ops;
};
#define TENDERMINT__CRYPTO__PROOF_OPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__crypto__proof_ops__descriptor) \
    , 0,NULL }


/* Tendermint__Crypto__Proof methods */
void   tendermint__crypto__proof__init
                     (Tendermint__Crypto__Proof         *message);
size_t tendermint__crypto__proof__get_packed_size
                     (const Tendermint__Crypto__Proof   *message);
size_t tendermint__crypto__proof__pack
                     (const Tendermint__Crypto__Proof   *message,
                      uint8_t             *out);
size_t tendermint__crypto__proof__pack_to_buffer
                     (const Tendermint__Crypto__Proof   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Crypto__Proof *
       tendermint__crypto__proof__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__crypto__proof__free_unpacked
                     (Tendermint__Crypto__Proof *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Crypto__ValueOp methods */
void   tendermint__crypto__value_op__init
                     (Tendermint__Crypto__ValueOp         *message);
size_t tendermint__crypto__value_op__get_packed_size
                     (const Tendermint__Crypto__ValueOp   *message);
size_t tendermint__crypto__value_op__pack
                     (const Tendermint__Crypto__ValueOp   *message,
                      uint8_t             *out);
size_t tendermint__crypto__value_op__pack_to_buffer
                     (const Tendermint__Crypto__ValueOp   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Crypto__ValueOp *
       tendermint__crypto__value_op__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__crypto__value_op__free_unpacked
                     (Tendermint__Crypto__ValueOp *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Crypto__DominoOp methods */
void   tendermint__crypto__domino_op__init
                     (Tendermint__Crypto__DominoOp         *message);
size_t tendermint__crypto__domino_op__get_packed_size
                     (const Tendermint__Crypto__DominoOp   *message);
size_t tendermint__crypto__domino_op__pack
                     (const Tendermint__Crypto__DominoOp   *message,
                      uint8_t             *out);
size_t tendermint__crypto__domino_op__pack_to_buffer
                     (const Tendermint__Crypto__DominoOp   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Crypto__DominoOp *
       tendermint__crypto__domino_op__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__crypto__domino_op__free_unpacked
                     (Tendermint__Crypto__DominoOp *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Crypto__ProofOp methods */
void   tendermint__crypto__proof_op__init
                     (Tendermint__Crypto__ProofOp         *message);
size_t tendermint__crypto__proof_op__get_packed_size
                     (const Tendermint__Crypto__ProofOp   *message);
size_t tendermint__crypto__proof_op__pack
                     (const Tendermint__Crypto__ProofOp   *message,
                      uint8_t             *out);
size_t tendermint__crypto__proof_op__pack_to_buffer
                     (const Tendermint__Crypto__ProofOp   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Crypto__ProofOp *
       tendermint__crypto__proof_op__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__crypto__proof_op__free_unpacked
                     (Tendermint__Crypto__ProofOp *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Crypto__ProofOps methods */
void   tendermint__crypto__proof_ops__init
                     (Tendermint__Crypto__ProofOps         *message);
size_t tendermint__crypto__proof_ops__get_packed_size
                     (const Tendermint__Crypto__ProofOps   *message);
size_t tendermint__crypto__proof_ops__pack
                     (const Tendermint__Crypto__ProofOps   *message,
                      uint8_t             *out);
size_t tendermint__crypto__proof_ops__pack_to_buffer
                     (const Tendermint__Crypto__ProofOps   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Crypto__ProofOps *
       tendermint__crypto__proof_ops__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__crypto__proof_ops__free_unpacked
                     (Tendermint__Crypto__ProofOps *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tendermint__Crypto__Proof_Closure)
                 (const Tendermint__Crypto__Proof *message,
                  void *closure_data);
typedef void (*Tendermint__Crypto__ValueOp_Closure)
                 (const Tendermint__Crypto__ValueOp *message,
                  void *closure_data);
typedef void (*Tendermint__Crypto__DominoOp_Closure)
                 (const Tendermint__Crypto__DominoOp *message,
                  void *closure_data);
typedef void (*Tendermint__Crypto__ProofOp_Closure)
                 (const Tendermint__Crypto__ProofOp *message,
                  void *closure_data);
typedef void (*Tendermint__Crypto__ProofOps_Closure)
                 (const Tendermint__Crypto__ProofOps *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor tendermint__crypto__proof__descriptor;
extern const ProtobufCMessageDescriptor tendermint__crypto__value_op__descriptor;
extern const ProtobufCMessageDescriptor tendermint__crypto__domino_op__descriptor;
extern const ProtobufCMessageDescriptor tendermint__crypto__proof_op__descriptor;
extern const ProtobufCMessageDescriptor tendermint__crypto__proof_ops__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tendermint_2fcrypto_2fproof_2eproto__INCLUDED */
