/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tendermint/types/evidence.proto */

#ifndef PROTOBUF_C_tendermint_2ftypes_2fevidence_2eproto__INCLUDED
#define PROTOBUF_C_tendermint_2ftypes_2fevidence_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/timestamp.pb-c.h"
#include "tendermint/types/types.pb-c.h"
#include "tendermint/types/validator.pb-c.h"

typedef struct Tendermint__Types__Evidence Tendermint__Types__Evidence;
typedef struct Tendermint__Types__DuplicateVoteEvidence Tendermint__Types__DuplicateVoteEvidence;
typedef struct Tendermint__Types__LightClientAttackEvidence Tendermint__Types__LightClientAttackEvidence;
typedef struct Tendermint__Types__EvidenceList Tendermint__Types__EvidenceList;


/* --- enums --- */


/* --- messages --- */

typedef enum {
  TENDERMINT__TYPES__EVIDENCE__SUM__NOT_SET = 0,
  TENDERMINT__TYPES__EVIDENCE__SUM_DUPLICATE_VOTE_EVIDENCE = 1,
  TENDERMINT__TYPES__EVIDENCE__SUM_LIGHT_CLIENT_ATTACK_EVIDENCE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TENDERMINT__TYPES__EVIDENCE__SUM__CASE)
} Tendermint__Types__Evidence__SumCase;

struct  Tendermint__Types__Evidence
{
  ProtobufCMessage base;
  Tendermint__Types__Evidence__SumCase sum_case;
  union {
    Tendermint__Types__DuplicateVoteEvidence *duplicate_vote_evidence;
    Tendermint__Types__LightClientAttackEvidence *light_client_attack_evidence;
  };
};
#define TENDERMINT__TYPES__EVIDENCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__evidence__descriptor) \
    , TENDERMINT__TYPES__EVIDENCE__SUM__NOT_SET, {0} }


/*
 * DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.
 */
struct  Tendermint__Types__DuplicateVoteEvidence
{
  ProtobufCMessage base;
  Tendermint__Types__Vote *vote_a;
  Tendermint__Types__Vote *vote_b;
  int64_t total_voting_power;
  int64_t validator_power;
  Google__Protobuf__Timestamp *timestamp;
};
#define TENDERMINT__TYPES__DUPLICATE_VOTE_EVIDENCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__duplicate_vote_evidence__descriptor) \
    , NULL, NULL, 0, 0, NULL }


/*
 * LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.
 */
struct  Tendermint__Types__LightClientAttackEvidence
{
  ProtobufCMessage base;
  Tendermint__Types__LightBlock *conflicting_block;
  int64_t common_height;
  size_t n_byzantine_validators;
  Tendermint__Types__Validator **byzantine_validators;
  int64_t total_voting_power;
  Google__Protobuf__Timestamp *timestamp;
};
#define TENDERMINT__TYPES__LIGHT_CLIENT_ATTACK_EVIDENCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__light_client_attack_evidence__descriptor) \
    , NULL, 0, 0,NULL, 0, NULL }


struct  Tendermint__Types__EvidenceList
{
  ProtobufCMessage base;
  size_t n_evidence;
  Tendermint__Types__Evidence **evidence;
};
#define TENDERMINT__TYPES__EVIDENCE_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__evidence_list__descriptor) \
    , 0,NULL }


/* Tendermint__Types__Evidence methods */
void   tendermint__types__evidence__init
                     (Tendermint__Types__Evidence         *message);
size_t tendermint__types__evidence__get_packed_size
                     (const Tendermint__Types__Evidence   *message);
size_t tendermint__types__evidence__pack
                     (const Tendermint__Types__Evidence   *message,
                      uint8_t             *out);
size_t tendermint__types__evidence__pack_to_buffer
                     (const Tendermint__Types__Evidence   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__Evidence *
       tendermint__types__evidence__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__evidence__free_unpacked
                     (Tendermint__Types__Evidence *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__DuplicateVoteEvidence methods */
void   tendermint__types__duplicate_vote_evidence__init
                     (Tendermint__Types__DuplicateVoteEvidence         *message);
size_t tendermint__types__duplicate_vote_evidence__get_packed_size
                     (const Tendermint__Types__DuplicateVoteEvidence   *message);
size_t tendermint__types__duplicate_vote_evidence__pack
                     (const Tendermint__Types__DuplicateVoteEvidence   *message,
                      uint8_t             *out);
size_t tendermint__types__duplicate_vote_evidence__pack_to_buffer
                     (const Tendermint__Types__DuplicateVoteEvidence   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__DuplicateVoteEvidence *
       tendermint__types__duplicate_vote_evidence__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__duplicate_vote_evidence__free_unpacked
                     (Tendermint__Types__DuplicateVoteEvidence *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__LightClientAttackEvidence methods */
void   tendermint__types__light_client_attack_evidence__init
                     (Tendermint__Types__LightClientAttackEvidence         *message);
size_t tendermint__types__light_client_attack_evidence__get_packed_size
                     (const Tendermint__Types__LightClientAttackEvidence   *message);
size_t tendermint__types__light_client_attack_evidence__pack
                     (const Tendermint__Types__LightClientAttackEvidence   *message,
                      uint8_t             *out);
size_t tendermint__types__light_client_attack_evidence__pack_to_buffer
                     (const Tendermint__Types__LightClientAttackEvidence   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__LightClientAttackEvidence *
       tendermint__types__light_client_attack_evidence__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__light_client_attack_evidence__free_unpacked
                     (Tendermint__Types__LightClientAttackEvidence *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__EvidenceList methods */
void   tendermint__types__evidence_list__init
                     (Tendermint__Types__EvidenceList         *message);
size_t tendermint__types__evidence_list__get_packed_size
                     (const Tendermint__Types__EvidenceList   *message);
size_t tendermint__types__evidence_list__pack
                     (const Tendermint__Types__EvidenceList   *message,
                      uint8_t             *out);
size_t tendermint__types__evidence_list__pack_to_buffer
                     (const Tendermint__Types__EvidenceList   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__EvidenceList *
       tendermint__types__evidence_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__evidence_list__free_unpacked
                     (Tendermint__Types__EvidenceList *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tendermint__Types__Evidence_Closure)
                 (const Tendermint__Types__Evidence *message,
                  void *closure_data);
typedef void (*Tendermint__Types__DuplicateVoteEvidence_Closure)
                 (const Tendermint__Types__DuplicateVoteEvidence *message,
                  void *closure_data);
typedef void (*Tendermint__Types__LightClientAttackEvidence_Closure)
                 (const Tendermint__Types__LightClientAttackEvidence *message,
                  void *closure_data);
typedef void (*Tendermint__Types__EvidenceList_Closure)
                 (const Tendermint__Types__EvidenceList *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor tendermint__types__evidence__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__duplicate_vote_evidence__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__light_client_attack_evidence__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__evidence_list__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tendermint_2ftypes_2fevidence_2eproto__INCLUDED */
