/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tendermint/types/params.proto */

#ifndef PROTOBUF_C_tendermint_2ftypes_2fparams_2eproto__INCLUDED
#define PROTOBUF_C_tendermint_2ftypes_2fparams_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/duration.pb-c.h"

typedef struct Tendermint__Types__ConsensusParams Tendermint__Types__ConsensusParams;
typedef struct Tendermint__Types__BlockParams Tendermint__Types__BlockParams;
typedef struct Tendermint__Types__EvidenceParams Tendermint__Types__EvidenceParams;
typedef struct Tendermint__Types__ValidatorParams Tendermint__Types__ValidatorParams;
typedef struct Tendermint__Types__VersionParams Tendermint__Types__VersionParams;
typedef struct Tendermint__Types__HashedParams Tendermint__Types__HashedParams;


/* --- enums --- */


/* --- messages --- */

/*
 * ConsensusParams contains consensus critical parameters that determine the
 * validity of blocks.
 */
struct  Tendermint__Types__ConsensusParams
{
  ProtobufCMessage base;
  Tendermint__Types__BlockParams *block;
  Tendermint__Types__EvidenceParams *evidence;
  Tendermint__Types__ValidatorParams *validator;
  Tendermint__Types__VersionParams *version;
};
#define TENDERMINT__TYPES__CONSENSUS_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__consensus_params__descriptor) \
    , NULL, NULL, NULL, NULL }


/*
 * BlockParams contains limits on the block size.
 */
struct  Tendermint__Types__BlockParams
{
  ProtobufCMessage base;
  /*
   * Max block size, in bytes.
   * Note: must be greater than 0
   */
  int64_t max_bytes;
  /*
   * Max gas per block.
   * Note: must be greater or equal to -1
   */
  int64_t max_gas;
};
#define TENDERMINT__TYPES__BLOCK_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__block_params__descriptor) \
    , 0, 0 }


/*
 * EvidenceParams determine how we handle evidence of malfeasance.
 */
struct  Tendermint__Types__EvidenceParams
{
  ProtobufCMessage base;
  /*
   * Max age of evidence, in blocks.
   * The basic formula for calculating this is: MaxAgeDuration / {average block
   * time}.
   */
  int64_t max_age_num_blocks;
  /*
   * Max age of evidence, in time.
   * It should correspond with an app's "unbonding period" or other similar
   * mechanism for handling [Nothing-At-Stake
   * attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
   */
  Google__Protobuf__Duration *max_age_duration;
  /*
   * This sets the maximum size of total evidence in bytes that can be committed in a single block.
   * and should fall comfortably under the max block bytes.
   * Default is 1048576 or 1MB
   */
  int64_t max_bytes;
};
#define TENDERMINT__TYPES__EVIDENCE_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__evidence_params__descriptor) \
    , 0, NULL, 0 }


/*
 * ValidatorParams restrict the public key types validators can use.
 * NOTE: uses ABCI pubkey naming, not Amino names.
 */
struct  Tendermint__Types__ValidatorParams
{
  ProtobufCMessage base;
  size_t n_pub_key_types;
  char **pub_key_types;
};
#define TENDERMINT__TYPES__VALIDATOR_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__validator_params__descriptor) \
    , 0,NULL }


/*
 * VersionParams contains the ABCI application version.
 */
struct  Tendermint__Types__VersionParams
{
  ProtobufCMessage base;
  uint64_t app;
};
#define TENDERMINT__TYPES__VERSION_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__version_params__descriptor) \
    , 0 }


/*
 * HashedParams is a subset of ConsensusParams.
 * It is hashed into the Header.ConsensusHash.
 */
struct  Tendermint__Types__HashedParams
{
  ProtobufCMessage base;
  int64_t block_max_bytes;
  int64_t block_max_gas;
};
#define TENDERMINT__TYPES__HASHED_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__hashed_params__descriptor) \
    , 0, 0 }


/* Tendermint__Types__ConsensusParams methods */
void   tendermint__types__consensus_params__init
                     (Tendermint__Types__ConsensusParams         *message);
size_t tendermint__types__consensus_params__get_packed_size
                     (const Tendermint__Types__ConsensusParams   *message);
size_t tendermint__types__consensus_params__pack
                     (const Tendermint__Types__ConsensusParams   *message,
                      uint8_t             *out);
size_t tendermint__types__consensus_params__pack_to_buffer
                     (const Tendermint__Types__ConsensusParams   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__ConsensusParams *
       tendermint__types__consensus_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__consensus_params__free_unpacked
                     (Tendermint__Types__ConsensusParams *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__BlockParams methods */
void   tendermint__types__block_params__init
                     (Tendermint__Types__BlockParams         *message);
size_t tendermint__types__block_params__get_packed_size
                     (const Tendermint__Types__BlockParams   *message);
size_t tendermint__types__block_params__pack
                     (const Tendermint__Types__BlockParams   *message,
                      uint8_t             *out);
size_t tendermint__types__block_params__pack_to_buffer
                     (const Tendermint__Types__BlockParams   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__BlockParams *
       tendermint__types__block_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__block_params__free_unpacked
                     (Tendermint__Types__BlockParams *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__EvidenceParams methods */
void   tendermint__types__evidence_params__init
                     (Tendermint__Types__EvidenceParams         *message);
size_t tendermint__types__evidence_params__get_packed_size
                     (const Tendermint__Types__EvidenceParams   *message);
size_t tendermint__types__evidence_params__pack
                     (const Tendermint__Types__EvidenceParams   *message,
                      uint8_t             *out);
size_t tendermint__types__evidence_params__pack_to_buffer
                     (const Tendermint__Types__EvidenceParams   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__EvidenceParams *
       tendermint__types__evidence_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__evidence_params__free_unpacked
                     (Tendermint__Types__EvidenceParams *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__ValidatorParams methods */
void   tendermint__types__validator_params__init
                     (Tendermint__Types__ValidatorParams         *message);
size_t tendermint__types__validator_params__get_packed_size
                     (const Tendermint__Types__ValidatorParams   *message);
size_t tendermint__types__validator_params__pack
                     (const Tendermint__Types__ValidatorParams   *message,
                      uint8_t             *out);
size_t tendermint__types__validator_params__pack_to_buffer
                     (const Tendermint__Types__ValidatorParams   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__ValidatorParams *
       tendermint__types__validator_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__validator_params__free_unpacked
                     (Tendermint__Types__ValidatorParams *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__VersionParams methods */
void   tendermint__types__version_params__init
                     (Tendermint__Types__VersionParams         *message);
size_t tendermint__types__version_params__get_packed_size
                     (const Tendermint__Types__VersionParams   *message);
size_t tendermint__types__version_params__pack
                     (const Tendermint__Types__VersionParams   *message,
                      uint8_t             *out);
size_t tendermint__types__version_params__pack_to_buffer
                     (const Tendermint__Types__VersionParams   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__VersionParams *
       tendermint__types__version_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__version_params__free_unpacked
                     (Tendermint__Types__VersionParams *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__HashedParams methods */
void   tendermint__types__hashed_params__init
                     (Tendermint__Types__HashedParams         *message);
size_t tendermint__types__hashed_params__get_packed_size
                     (const Tendermint__Types__HashedParams   *message);
size_t tendermint__types__hashed_params__pack
                     (const Tendermint__Types__HashedParams   *message,
                      uint8_t             *out);
size_t tendermint__types__hashed_params__pack_to_buffer
                     (const Tendermint__Types__HashedParams   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__HashedParams *
       tendermint__types__hashed_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__hashed_params__free_unpacked
                     (Tendermint__Types__HashedParams *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tendermint__Types__ConsensusParams_Closure)
                 (const Tendermint__Types__ConsensusParams *message,
                  void *closure_data);
typedef void (*Tendermint__Types__BlockParams_Closure)
                 (const Tendermint__Types__BlockParams *message,
                  void *closure_data);
typedef void (*Tendermint__Types__EvidenceParams_Closure)
                 (const Tendermint__Types__EvidenceParams *message,
                  void *closure_data);
typedef void (*Tendermint__Types__ValidatorParams_Closure)
                 (const Tendermint__Types__ValidatorParams *message,
                  void *closure_data);
typedef void (*Tendermint__Types__VersionParams_Closure)
                 (const Tendermint__Types__VersionParams *message,
                  void *closure_data);
typedef void (*Tendermint__Types__HashedParams_Closure)
                 (const Tendermint__Types__HashedParams *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor tendermint__types__consensus_params__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__block_params__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__evidence_params__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__validator_params__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__version_params__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__hashed_params__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tendermint_2ftypes_2fparams_2eproto__INCLUDED */
