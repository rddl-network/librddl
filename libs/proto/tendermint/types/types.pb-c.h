/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tendermint/types/types.proto */

#ifndef PROTOBUF_C_tendermint_2ftypes_2ftypes_2eproto__INCLUDED
#define PROTOBUF_C_tendermint_2ftypes_2ftypes_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "gogoproto/gogo.pb-c.h"
#include "google/protobuf/timestamp.pb-c.h"
#include "tendermint/crypto/proof.pb-c.h"
#include "tendermint/version/types.pb-c.h"
#include "tendermint/types/validator.pb-c.h"

typedef struct Tendermint__Types__PartSetHeader Tendermint__Types__PartSetHeader;
typedef struct Tendermint__Types__Part Tendermint__Types__Part;
typedef struct Tendermint__Types__BlockID Tendermint__Types__BlockID;
typedef struct Tendermint__Types__Header Tendermint__Types__Header;
typedef struct Tendermint__Types__Data Tendermint__Types__Data;
typedef struct Tendermint__Types__Vote Tendermint__Types__Vote;
typedef struct Tendermint__Types__Commit Tendermint__Types__Commit;
typedef struct Tendermint__Types__CommitSig Tendermint__Types__CommitSig;
typedef struct Tendermint__Types__Proposal Tendermint__Types__Proposal;
typedef struct Tendermint__Types__SignedHeader Tendermint__Types__SignedHeader;
typedef struct Tendermint__Types__LightBlock Tendermint__Types__LightBlock;
typedef struct Tendermint__Types__BlockMeta Tendermint__Types__BlockMeta;
typedef struct Tendermint__Types__TxProof Tendermint__Types__TxProof;


/* --- enums --- */

/*
 * BlockIdFlag indicates which BlcokID the signature is for
 */
typedef enum _Tendermint__Types__BlockIDFlag {
  TENDERMINT__TYPES__BLOCK_IDFLAG__BLOCK_ID_FLAG_UNKNOWN = 0,
  TENDERMINT__TYPES__BLOCK_IDFLAG__BLOCK_ID_FLAG_ABSENT = 1,
  TENDERMINT__TYPES__BLOCK_IDFLAG__BLOCK_ID_FLAG_COMMIT = 2,
  TENDERMINT__TYPES__BLOCK_IDFLAG__BLOCK_ID_FLAG_NIL = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TENDERMINT__TYPES__BLOCK_IDFLAG)
} Tendermint__Types__BlockIDFlag;
/*
 * SignedMsgType is a type of signed message in the consensus.
 */
typedef enum _Tendermint__Types__SignedMsgType {
  TENDERMINT__TYPES__SIGNED_MSG_TYPE__SIGNED_MSG_TYPE_UNKNOWN = 0,
  /*
   * Votes
   */
  TENDERMINT__TYPES__SIGNED_MSG_TYPE__SIGNED_MSG_TYPE_PREVOTE = 1,
  TENDERMINT__TYPES__SIGNED_MSG_TYPE__SIGNED_MSG_TYPE_PRECOMMIT = 2,
  /*
   * Proposals
   */
  TENDERMINT__TYPES__SIGNED_MSG_TYPE__SIGNED_MSG_TYPE_PROPOSAL = 32
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TENDERMINT__TYPES__SIGNED_MSG_TYPE)
} Tendermint__Types__SignedMsgType;

/* --- messages --- */

/*
 * PartsetHeader
 */
struct  Tendermint__Types__PartSetHeader
{
  ProtobufCMessage base;
  uint32_t total;
  ProtobufCBinaryData hash;
};
#define TENDERMINT__TYPES__PART_SET_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__part_set_header__descriptor) \
    , 0, {0,NULL} }


struct  Tendermint__Types__Part
{
  ProtobufCMessage base;
  uint32_t index;
  ProtobufCBinaryData bytes;
  Tendermint__Crypto__Proof *proof;
};
#define TENDERMINT__TYPES__PART__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__part__descriptor) \
    , 0, {0,NULL}, NULL }


/*
 * BlockID
 */
struct  Tendermint__Types__BlockID
{
  ProtobufCMessage base;
  ProtobufCBinaryData hash;
  Tendermint__Types__PartSetHeader *part_set_header;
};
#define TENDERMINT__TYPES__BLOCK_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__block_id__descriptor) \
    , {0,NULL}, NULL }


/*
 * Header defines the structure of a block header.
 */
struct  Tendermint__Types__Header
{
  ProtobufCMessage base;
  /*
   * basic block info
   */
  Tendermint__Version__Consensus *version;
  char *chain_id;
  int64_t height;
  Google__Protobuf__Timestamp *time;
  /*
   * prev block info
   */
  Tendermint__Types__BlockID *last_block_id;
  /*
   * hashes of block data
   */
  /*
   * commit from validators from the last block
   */
  ProtobufCBinaryData last_commit_hash;
  /*
   * transactions
   */
  ProtobufCBinaryData data_hash;
  /*
   * hashes from the app output from the prev block
   */
  /*
   * validators for the current block
   */
  ProtobufCBinaryData validators_hash;
  /*
   * validators for the next block
   */
  ProtobufCBinaryData next_validators_hash;
  /*
   * consensus params for current block
   */
  ProtobufCBinaryData consensus_hash;
  /*
   * state after txs from the previous block
   */
  ProtobufCBinaryData app_hash;
  /*
   * root hash of all results from the txs from the previous block
   */
  ProtobufCBinaryData last_results_hash;
  /*
   * consensus info
   */
  /*
   * evidence included in the block
   */
  ProtobufCBinaryData evidence_hash;
  /*
   * original proposer of the block
   */
  ProtobufCBinaryData proposer_address;
};
#define TENDERMINT__TYPES__HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__header__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, 0, NULL, NULL, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL} }


/*
 * Data contains the set of transactions included in the block
 */
struct  Tendermint__Types__Data
{
  ProtobufCMessage base;
  /*
   * Txs that will be applied by state @ block.Height+1.
   * NOTE: not all txs here are valid.  We're just agreeing on the order first.
   * This means that block.AppHash does not include these txs.
   */
  size_t n_txs;
  ProtobufCBinaryData *txs;
};
#define TENDERMINT__TYPES__DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__data__descriptor) \
    , 0,NULL }


/*
 * Vote represents a prevote, precommit, or commit vote from validators for
 * consensus.
 */
struct  Tendermint__Types__Vote
{
  ProtobufCMessage base;
  Tendermint__Types__SignedMsgType type;
  int64_t height;
  int32_t round;
  /*
   * zero if vote is nil.
   */
  Tendermint__Types__BlockID *block_id;
  Google__Protobuf__Timestamp *timestamp;
  ProtobufCBinaryData validator_address;
  int32_t validator_index;
  ProtobufCBinaryData signature;
};
#define TENDERMINT__TYPES__VOTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__vote__descriptor) \
    , TENDERMINT__TYPES__SIGNED_MSG_TYPE__SIGNED_MSG_TYPE_UNKNOWN, 0, 0, NULL, NULL, {0,NULL}, 0, {0,NULL} }


/*
 * Commit contains the evidence that a block was committed by a set of validators.
 */
struct  Tendermint__Types__Commit
{
  ProtobufCMessage base;
  int64_t height;
  int32_t round;
  Tendermint__Types__BlockID *block_id;
  size_t n_signatures;
  Tendermint__Types__CommitSig **signatures;
};
#define TENDERMINT__TYPES__COMMIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__commit__descriptor) \
    , 0, 0, NULL, 0,NULL }


/*
 * CommitSig is a part of the Vote included in a Commit.
 */
struct  Tendermint__Types__CommitSig
{
  ProtobufCMessage base;
  Tendermint__Types__BlockIDFlag block_id_flag;
  ProtobufCBinaryData validator_address;
  Google__Protobuf__Timestamp *timestamp;
  ProtobufCBinaryData signature;
};
#define TENDERMINT__TYPES__COMMIT_SIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__commit_sig__descriptor) \
    , TENDERMINT__TYPES__BLOCK_IDFLAG__BLOCK_ID_FLAG_UNKNOWN, {0,NULL}, NULL, {0,NULL} }


struct  Tendermint__Types__Proposal
{
  ProtobufCMessage base;
  Tendermint__Types__SignedMsgType type;
  int64_t height;
  int32_t round;
  int32_t pol_round;
  Tendermint__Types__BlockID *block_id;
  Google__Protobuf__Timestamp *timestamp;
  ProtobufCBinaryData signature;
};
#define TENDERMINT__TYPES__PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__proposal__descriptor) \
    , TENDERMINT__TYPES__SIGNED_MSG_TYPE__SIGNED_MSG_TYPE_UNKNOWN, 0, 0, 0, NULL, NULL, {0,NULL} }


struct  Tendermint__Types__SignedHeader
{
  ProtobufCMessage base;
  Tendermint__Types__Header *header;
  Tendermint__Types__Commit *commit;
};
#define TENDERMINT__TYPES__SIGNED_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__signed_header__descriptor) \
    , NULL, NULL }


struct  Tendermint__Types__LightBlock
{
  ProtobufCMessage base;
  Tendermint__Types__SignedHeader *signed_header;
  Tendermint__Types__ValidatorSet *validator_set;
};
#define TENDERMINT__TYPES__LIGHT_BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__light_block__descriptor) \
    , NULL, NULL }


struct  Tendermint__Types__BlockMeta
{
  ProtobufCMessage base;
  Tendermint__Types__BlockID *block_id;
  int64_t block_size;
  Tendermint__Types__Header *header;
  int64_t num_txs;
};
#define TENDERMINT__TYPES__BLOCK_META__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__block_meta__descriptor) \
    , NULL, 0, NULL, 0 }


/*
 * TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree.
 */
struct  Tendermint__Types__TxProof
{
  ProtobufCMessage base;
  ProtobufCBinaryData root_hash;
  ProtobufCBinaryData data;
  Tendermint__Crypto__Proof *proof;
};
#define TENDERMINT__TYPES__TX_PROOF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendermint__types__tx_proof__descriptor) \
    , {0,NULL}, {0,NULL}, NULL }


/* Tendermint__Types__PartSetHeader methods */
void   tendermint__types__part_set_header__init
                     (Tendermint__Types__PartSetHeader         *message);
size_t tendermint__types__part_set_header__get_packed_size
                     (const Tendermint__Types__PartSetHeader   *message);
size_t tendermint__types__part_set_header__pack
                     (const Tendermint__Types__PartSetHeader   *message,
                      uint8_t             *out);
size_t tendermint__types__part_set_header__pack_to_buffer
                     (const Tendermint__Types__PartSetHeader   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__PartSetHeader *
       tendermint__types__part_set_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__part_set_header__free_unpacked
                     (Tendermint__Types__PartSetHeader *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__Part methods */
void   tendermint__types__part__init
                     (Tendermint__Types__Part         *message);
size_t tendermint__types__part__get_packed_size
                     (const Tendermint__Types__Part   *message);
size_t tendermint__types__part__pack
                     (const Tendermint__Types__Part   *message,
                      uint8_t             *out);
size_t tendermint__types__part__pack_to_buffer
                     (const Tendermint__Types__Part   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__Part *
       tendermint__types__part__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__part__free_unpacked
                     (Tendermint__Types__Part *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__BlockID methods */
void   tendermint__types__block_id__init
                     (Tendermint__Types__BlockID         *message);
size_t tendermint__types__block_id__get_packed_size
                     (const Tendermint__Types__BlockID   *message);
size_t tendermint__types__block_id__pack
                     (const Tendermint__Types__BlockID   *message,
                      uint8_t             *out);
size_t tendermint__types__block_id__pack_to_buffer
                     (const Tendermint__Types__BlockID   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__BlockID *
       tendermint__types__block_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__block_id__free_unpacked
                     (Tendermint__Types__BlockID *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__Header methods */
void   tendermint__types__header__init
                     (Tendermint__Types__Header         *message);
size_t tendermint__types__header__get_packed_size
                     (const Tendermint__Types__Header   *message);
size_t tendermint__types__header__pack
                     (const Tendermint__Types__Header   *message,
                      uint8_t             *out);
size_t tendermint__types__header__pack_to_buffer
                     (const Tendermint__Types__Header   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__Header *
       tendermint__types__header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__header__free_unpacked
                     (Tendermint__Types__Header *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__Data methods */
void   tendermint__types__data__init
                     (Tendermint__Types__Data         *message);
size_t tendermint__types__data__get_packed_size
                     (const Tendermint__Types__Data   *message);
size_t tendermint__types__data__pack
                     (const Tendermint__Types__Data   *message,
                      uint8_t             *out);
size_t tendermint__types__data__pack_to_buffer
                     (const Tendermint__Types__Data   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__Data *
       tendermint__types__data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__data__free_unpacked
                     (Tendermint__Types__Data *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__Vote methods */
void   tendermint__types__vote__init
                     (Tendermint__Types__Vote         *message);
size_t tendermint__types__vote__get_packed_size
                     (const Tendermint__Types__Vote   *message);
size_t tendermint__types__vote__pack
                     (const Tendermint__Types__Vote   *message,
                      uint8_t             *out);
size_t tendermint__types__vote__pack_to_buffer
                     (const Tendermint__Types__Vote   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__Vote *
       tendermint__types__vote__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__vote__free_unpacked
                     (Tendermint__Types__Vote *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__Commit methods */
void   tendermint__types__commit__init
                     (Tendermint__Types__Commit         *message);
size_t tendermint__types__commit__get_packed_size
                     (const Tendermint__Types__Commit   *message);
size_t tendermint__types__commit__pack
                     (const Tendermint__Types__Commit   *message,
                      uint8_t             *out);
size_t tendermint__types__commit__pack_to_buffer
                     (const Tendermint__Types__Commit   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__Commit *
       tendermint__types__commit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__commit__free_unpacked
                     (Tendermint__Types__Commit *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__CommitSig methods */
void   tendermint__types__commit_sig__init
                     (Tendermint__Types__CommitSig         *message);
size_t tendermint__types__commit_sig__get_packed_size
                     (const Tendermint__Types__CommitSig   *message);
size_t tendermint__types__commit_sig__pack
                     (const Tendermint__Types__CommitSig   *message,
                      uint8_t             *out);
size_t tendermint__types__commit_sig__pack_to_buffer
                     (const Tendermint__Types__CommitSig   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__CommitSig *
       tendermint__types__commit_sig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__commit_sig__free_unpacked
                     (Tendermint__Types__CommitSig *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__Proposal methods */
void   tendermint__types__proposal__init
                     (Tendermint__Types__Proposal         *message);
size_t tendermint__types__proposal__get_packed_size
                     (const Tendermint__Types__Proposal   *message);
size_t tendermint__types__proposal__pack
                     (const Tendermint__Types__Proposal   *message,
                      uint8_t             *out);
size_t tendermint__types__proposal__pack_to_buffer
                     (const Tendermint__Types__Proposal   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__Proposal *
       tendermint__types__proposal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__proposal__free_unpacked
                     (Tendermint__Types__Proposal *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__SignedHeader methods */
void   tendermint__types__signed_header__init
                     (Tendermint__Types__SignedHeader         *message);
size_t tendermint__types__signed_header__get_packed_size
                     (const Tendermint__Types__SignedHeader   *message);
size_t tendermint__types__signed_header__pack
                     (const Tendermint__Types__SignedHeader   *message,
                      uint8_t             *out);
size_t tendermint__types__signed_header__pack_to_buffer
                     (const Tendermint__Types__SignedHeader   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__SignedHeader *
       tendermint__types__signed_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__signed_header__free_unpacked
                     (Tendermint__Types__SignedHeader *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__LightBlock methods */
void   tendermint__types__light_block__init
                     (Tendermint__Types__LightBlock         *message);
size_t tendermint__types__light_block__get_packed_size
                     (const Tendermint__Types__LightBlock   *message);
size_t tendermint__types__light_block__pack
                     (const Tendermint__Types__LightBlock   *message,
                      uint8_t             *out);
size_t tendermint__types__light_block__pack_to_buffer
                     (const Tendermint__Types__LightBlock   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__LightBlock *
       tendermint__types__light_block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__light_block__free_unpacked
                     (Tendermint__Types__LightBlock *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__BlockMeta methods */
void   tendermint__types__block_meta__init
                     (Tendermint__Types__BlockMeta         *message);
size_t tendermint__types__block_meta__get_packed_size
                     (const Tendermint__Types__BlockMeta   *message);
size_t tendermint__types__block_meta__pack
                     (const Tendermint__Types__BlockMeta   *message,
                      uint8_t             *out);
size_t tendermint__types__block_meta__pack_to_buffer
                     (const Tendermint__Types__BlockMeta   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__BlockMeta *
       tendermint__types__block_meta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__block_meta__free_unpacked
                     (Tendermint__Types__BlockMeta *message,
                      ProtobufCAllocator *allocator);
/* Tendermint__Types__TxProof methods */
void   tendermint__types__tx_proof__init
                     (Tendermint__Types__TxProof         *message);
size_t tendermint__types__tx_proof__get_packed_size
                     (const Tendermint__Types__TxProof   *message);
size_t tendermint__types__tx_proof__pack
                     (const Tendermint__Types__TxProof   *message,
                      uint8_t             *out);
size_t tendermint__types__tx_proof__pack_to_buffer
                     (const Tendermint__Types__TxProof   *message,
                      ProtobufCBuffer     *buffer);
Tendermint__Types__TxProof *
       tendermint__types__tx_proof__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendermint__types__tx_proof__free_unpacked
                     (Tendermint__Types__TxProof *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tendermint__Types__PartSetHeader_Closure)
                 (const Tendermint__Types__PartSetHeader *message,
                  void *closure_data);
typedef void (*Tendermint__Types__Part_Closure)
                 (const Tendermint__Types__Part *message,
                  void *closure_data);
typedef void (*Tendermint__Types__BlockID_Closure)
                 (const Tendermint__Types__BlockID *message,
                  void *closure_data);
typedef void (*Tendermint__Types__Header_Closure)
                 (const Tendermint__Types__Header *message,
                  void *closure_data);
typedef void (*Tendermint__Types__Data_Closure)
                 (const Tendermint__Types__Data *message,
                  void *closure_data);
typedef void (*Tendermint__Types__Vote_Closure)
                 (const Tendermint__Types__Vote *message,
                  void *closure_data);
typedef void (*Tendermint__Types__Commit_Closure)
                 (const Tendermint__Types__Commit *message,
                  void *closure_data);
typedef void (*Tendermint__Types__CommitSig_Closure)
                 (const Tendermint__Types__CommitSig *message,
                  void *closure_data);
typedef void (*Tendermint__Types__Proposal_Closure)
                 (const Tendermint__Types__Proposal *message,
                  void *closure_data);
typedef void (*Tendermint__Types__SignedHeader_Closure)
                 (const Tendermint__Types__SignedHeader *message,
                  void *closure_data);
typedef void (*Tendermint__Types__LightBlock_Closure)
                 (const Tendermint__Types__LightBlock *message,
                  void *closure_data);
typedef void (*Tendermint__Types__BlockMeta_Closure)
                 (const Tendermint__Types__BlockMeta *message,
                  void *closure_data);
typedef void (*Tendermint__Types__TxProof_Closure)
                 (const Tendermint__Types__TxProof *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    tendermint__types__block_idflag__descriptor;
extern const ProtobufCEnumDescriptor    tendermint__types__signed_msg_type__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__part_set_header__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__part__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__block_id__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__header__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__data__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__vote__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__commit__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__commit_sig__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__proposal__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__signed_header__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__light_block__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__block_meta__descriptor;
extern const ProtobufCMessageDescriptor tendermint__types__tx_proof__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tendermint_2ftypes_2ftypes_2eproto__INCLUDED */
