/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_COSMOS_CRYPTO_MULTISIG_V1BETA1_COSMOS_CRYPTO_MULTISIG_V1BETA1_MULTISIG_PB_H_INCLUDED
#define PB_COSMOS_CRYPTO_MULTISIG_V1BETA1_COSMOS_CRYPTO_MULTISIG_V1BETA1_MULTISIG_PB_H_INCLUDED
#define PB_NO_STATIC_ASSERT 1 
#include <pb.h>
#include "gogoproto/gogo.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* MultiSignature wraps the signatures from a multisig.LegacyAminoPubKey.
 See cosmos.tx.v1betata1.ModeInfo.Multi for how to specify which signers
 signed and with which modes. */
typedef struct _cosmos_crypto_multisig_v1beta1_MultiSignature {
    pb_callback_t signatures;
} cosmos_crypto_multisig_v1beta1_MultiSignature;

/* CompactBitArray is an implementation of a space efficient bit array.
 This is used to ensure that the encoded data takes up a minimal amount of
 space after proto encoding.
 This is not thread safe, and is not intended for concurrent usage. */
typedef struct _cosmos_crypto_multisig_v1beta1_CompactBitArray {
    uint32_t extra_bits_stored;
    pb_callback_t elems;
} cosmos_crypto_multisig_v1beta1_CompactBitArray;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define cosmos_crypto_multisig_v1beta1_MultiSignature_init_default {{{NULL}, NULL}}
#define cosmos_crypto_multisig_v1beta1_CompactBitArray_init_default {0, {{NULL}, NULL}}
#define cosmos_crypto_multisig_v1beta1_MultiSignature_init_zero {{{NULL}, NULL}}
#define cosmos_crypto_multisig_v1beta1_CompactBitArray_init_zero {0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define cosmos_crypto_multisig_v1beta1_MultiSignature_signatures_tag 1
#define cosmos_crypto_multisig_v1beta1_CompactBitArray_extra_bits_stored_tag 1
#define cosmos_crypto_multisig_v1beta1_CompactBitArray_elems_tag 2

/* Struct field encoding specification for nanopb */
#define cosmos_crypto_multisig_v1beta1_MultiSignature_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, BYTES,    signatures,        1)
#define cosmos_crypto_multisig_v1beta1_MultiSignature_CALLBACK pb_default_field_callback
#define cosmos_crypto_multisig_v1beta1_MultiSignature_DEFAULT NULL

#define cosmos_crypto_multisig_v1beta1_CompactBitArray_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   extra_bits_stored,   1) \
X(a, CALLBACK, SINGULAR, BYTES,    elems,             2)
#define cosmos_crypto_multisig_v1beta1_CompactBitArray_CALLBACK pb_default_field_callback
#define cosmos_crypto_multisig_v1beta1_CompactBitArray_DEFAULT NULL

extern const pb_msgdesc_t cosmos_crypto_multisig_v1beta1_MultiSignature_msg;
extern const pb_msgdesc_t cosmos_crypto_multisig_v1beta1_CompactBitArray_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define cosmos_crypto_multisig_v1beta1_MultiSignature_fields &cosmos_crypto_multisig_v1beta1_MultiSignature_msg
#define cosmos_crypto_multisig_v1beta1_CompactBitArray_fields &cosmos_crypto_multisig_v1beta1_CompactBitArray_msg

/* Maximum encoded size of messages (where known) */
/* cosmos_crypto_multisig_v1beta1_MultiSignature_size depends on runtime parameters */
/* cosmos_crypto_multisig_v1beta1_CompactBitArray_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
