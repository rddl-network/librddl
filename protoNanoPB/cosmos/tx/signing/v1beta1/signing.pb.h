/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_COSMOS_TX_SIGNING_V1BETA1_COSMOS_TX_SIGNING_V1BETA1_SIGNING_PB_H_INCLUDED
#define PB_COSMOS_TX_SIGNING_V1BETA1_COSMOS_TX_SIGNING_V1BETA1_SIGNING_PB_H_INCLUDED
#include <pb.h>
#include "cosmos/crypto/multisig/v1beta1/multisig.pb.h"
#include "google/protobuf/any.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* SignMode represents a signing mode with its own security guarantees.

 This enum should be considered a registry of all known sign modes
 in the Cosmos ecosystem. Apps are not expected to support all known
 sign modes. Apps that would like to support custom  sign modes are
 encouraged to open a small PR against this file to add a new case
 to this SignMode enum describing their sign mode so that different
 apps have a consistent version of this enum. */
typedef enum _cosmos_tx_signing_v1beta1_SignMode {
    /* SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
 rejected. */
    cosmos_tx_signing_v1beta1_SignMode_SIGN_MODE_UNSPECIFIED = 0,
    /* SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
 verified with raw bytes from Tx. */
    cosmos_tx_signing_v1beta1_SignMode_SIGN_MODE_DIRECT = 1,
    /* SIGN_MODE_TEXTUAL is a future signing mode that will verify some
 human-readable textual representation on top of the binary representation
 from SIGN_MODE_DIRECT. It is currently not supported. */
    cosmos_tx_signing_v1beta1_SignMode_SIGN_MODE_TEXTUAL = 2,
    /* SIGN_MODE_DIRECT_AUX specifies a signing mode which uses
 SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not
 require signers signing over other signers' `signer_info`. It also allows
 for adding Tips in transactions.

 Since: cosmos-sdk 0.46 */
    cosmos_tx_signing_v1beta1_SignMode_SIGN_MODE_DIRECT_AUX = 3,
    /* SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
 Amino JSON and will be removed in the future. */
    cosmos_tx_signing_v1beta1_SignMode_SIGN_MODE_LEGACY_AMINO_JSON = 127,
    /* SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
 SDK. Ref: https://eips.ethereum.org/EIPS/eip-191

 Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,
 but is not implemented on the SDK by default. To enable EIP-191, you need
 to pass a custom `TxConfig` that has an implementation of
 `SignModeHandler` for EIP-191. The SDK may decide to fully support
 EIP-191 in the future.

 Since: cosmos-sdk 0.45.2 */
    cosmos_tx_signing_v1beta1_SignMode_SIGN_MODE_EIP_191 = 191
} cosmos_tx_signing_v1beta1_SignMode;

/* Struct definitions */
/* SignatureDescriptors wraps multiple SignatureDescriptor's. */
typedef struct _cosmos_tx_signing_v1beta1_SignatureDescriptors {
    /* signatures are the signature descriptors */
    pb_callback_t signatures;
} cosmos_tx_signing_v1beta1_SignatureDescriptors;

/* Single is the signature data for a single signer */
typedef struct _cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single {
    /* mode is the signing mode of the single signer */
    cosmos_tx_signing_v1beta1_SignMode mode;
    /* signature is the raw signature bytes */
    pb_callback_t signature;
} cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single;

/* Multi is the signature data for a multisig public key */
typedef struct _cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi {
    /* bitarray specifies which keys within the multisig are signing */
    bool has_bitarray;
    cosmos_crypto_multisig_v1beta1_CompactBitArray bitarray;
    /* signatures is the signatures of the multi-signature */
    pb_callback_t signatures;
} cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi;

/* Data represents signature data */
typedef struct _cosmos_tx_signing_v1beta1_SignatureDescriptor_Data {
    pb_size_t which_sum;
    union {
        /* single represents a single signer */
        cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single single;
        /* multi represents a multisig signer */
        cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi multi;
    } sum;
} cosmos_tx_signing_v1beta1_SignatureDescriptor_Data;

/* SignatureDescriptor is a convenience type which represents the full data for
 a signature including the public key of the signer, signing modes and the
 signature itself. It is primarily used for coordinating signatures between
 clients. */
typedef struct _cosmos_tx_signing_v1beta1_SignatureDescriptor {
    /* public_key is the public key of the signer */
    bool has_public_key;
    google_protobuf_Any public_key;
    bool has_data;
    cosmos_tx_signing_v1beta1_SignatureDescriptor_Data data;
    /* sequence is the sequence of the account, which describes the
 number of committed transactions signed by a given address. It is used to prevent
 replay attacks. */
    uint64_t sequence;
} cosmos_tx_signing_v1beta1_SignatureDescriptor;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _cosmos_tx_signing_v1beta1_SignMode_MIN cosmos_tx_signing_v1beta1_SignMode_SIGN_MODE_UNSPECIFIED
#define _cosmos_tx_signing_v1beta1_SignMode_MAX cosmos_tx_signing_v1beta1_SignMode_SIGN_MODE_EIP_191
#define _cosmos_tx_signing_v1beta1_SignMode_ARRAYSIZE ((cosmos_tx_signing_v1beta1_SignMode)(cosmos_tx_signing_v1beta1_SignMode_SIGN_MODE_EIP_191+1))




#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_mode_ENUMTYPE cosmos_tx_signing_v1beta1_SignMode



/* Initializer values for message structs */
#define cosmos_tx_signing_v1beta1_SignatureDescriptors_init_default {{{NULL}, NULL}}
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_init_default {false, google_protobuf_Any_init_default, false, cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_init_default, 0}
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_init_default {0, {cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_init_default}}
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_init_default {_cosmos_tx_signing_v1beta1_SignMode_MIN, {{NULL}, NULL}}
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_init_default {false, cosmos_crypto_multisig_v1beta1_CompactBitArray_init_default, {{NULL}, NULL}}
#define cosmos_tx_signing_v1beta1_SignatureDescriptors_init_zero {{{NULL}, NULL}}
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_init_zero {false, google_protobuf_Any_init_zero, false, cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_init_zero, 0}
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_init_zero {0, {cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_init_zero}}
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_init_zero {_cosmos_tx_signing_v1beta1_SignMode_MIN, {{NULL}, NULL}}
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_init_zero {false, cosmos_crypto_multisig_v1beta1_CompactBitArray_init_zero, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define cosmos_tx_signing_v1beta1_SignatureDescriptors_signatures_tag 1
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_mode_tag 1
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_signature_tag 2
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_bitarray_tag 1
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_signatures_tag 2
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_single_tag 1
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_multi_tag 2
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_public_key_tag 1
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_data_tag 2
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_sequence_tag 3

/* Struct field encoding specification for nanopb */
#define cosmos_tx_signing_v1beta1_SignatureDescriptors_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  signatures,        1)
#define cosmos_tx_signing_v1beta1_SignatureDescriptors_CALLBACK pb_default_field_callback
#define cosmos_tx_signing_v1beta1_SignatureDescriptors_DEFAULT NULL
#define cosmos_tx_signing_v1beta1_SignatureDescriptors_signatures_MSGTYPE cosmos_tx_signing_v1beta1_SignatureDescriptor

#define cosmos_tx_signing_v1beta1_SignatureDescriptor_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  public_key,        1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  data,              2) \
X(a, STATIC,   SINGULAR, UINT64,   sequence,          3)
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_CALLBACK NULL
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_DEFAULT NULL
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_public_key_MSGTYPE google_protobuf_Any
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_data_MSGTYPE cosmos_tx_signing_v1beta1_SignatureDescriptor_Data

#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (sum,single,sum.single),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (sum,multi,sum.multi),   2)
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_CALLBACK NULL
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_DEFAULT NULL
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_sum_single_MSGTYPE cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_sum_multi_MSGTYPE cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi

#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    mode,              1) \
X(a, CALLBACK, SINGULAR, BYTES,    signature,         2)
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_CALLBACK pb_default_field_callback
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_DEFAULT NULL

#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  bitarray,          1) \
X(a, CALLBACK, REPEATED, MESSAGE,  signatures,        2)
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_CALLBACK pb_default_field_callback
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_DEFAULT NULL
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_bitarray_MSGTYPE cosmos_crypto_multisig_v1beta1_CompactBitArray
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_signatures_MSGTYPE cosmos_tx_signing_v1beta1_SignatureDescriptor_Data

extern const pb_msgdesc_t cosmos_tx_signing_v1beta1_SignatureDescriptors_msg;
extern const pb_msgdesc_t cosmos_tx_signing_v1beta1_SignatureDescriptor_msg;
extern const pb_msgdesc_t cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_msg;
extern const pb_msgdesc_t cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_msg;
extern const pb_msgdesc_t cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define cosmos_tx_signing_v1beta1_SignatureDescriptors_fields &cosmos_tx_signing_v1beta1_SignatureDescriptors_msg
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_fields &cosmos_tx_signing_v1beta1_SignatureDescriptor_msg
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_fields &cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_msg
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_fields &cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_msg
#define cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_fields &cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_msg

/* Maximum encoded size of messages (where known) */
/* cosmos_tx_signing_v1beta1_SignatureDescriptors_size depends on runtime parameters */
/* cosmos_tx_signing_v1beta1_SignatureDescriptor_size depends on runtime parameters */
/* cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_size depends on runtime parameters */
/* cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Single_size depends on runtime parameters */
/* cosmos_tx_signing_v1beta1_SignatureDescriptor_Data_Multi_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
