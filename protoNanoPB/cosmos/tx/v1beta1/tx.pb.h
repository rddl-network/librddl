/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_COSMOS_TX_V1BETA1_COSMOS_TX_V1BETA1_TX_PB_H_INCLUDED
#define PB_COSMOS_TX_V1BETA1_COSMOS_TX_V1BETA1_TX_PB_H_INCLUDED
#define PB_NO_STATIC_ASSERT 1 
#include <pb.h>
#include "gogoproto/gogo.pb.h"
#include "cosmos/crypto/multisig/v1beta1/multisig.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos/tx/signing/v1beta1/signing.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos_proto/cosmos.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* TxRaw is a variant of Tx that pins the signer's exact binary representation
 of body and auth_info. This is used for signing, broadcasting and
 verification. The binary `serialize(tx: TxRaw)` is stored in Tendermint and
 the hash `sha256(serialize(tx: TxRaw))` becomes the "txhash", commonly used
 as the transaction ID. */
typedef struct _cosmos_tx_v1beta1_TxRaw {
    /* body_bytes is a protobuf serialization of a TxBody that matches the
 representation in SignDoc. */
    pb_callback_t body_bytes;
    /* auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
 representation in SignDoc. */
    pb_callback_t auth_info_bytes;
    /* signatures is a list of signatures that matches the length and order of
 AuthInfo's signer_infos to allow connecting signature meta information like
 public key and signing mode by position. */
    pb_callback_t signatures;
} cosmos_tx_v1beta1_TxRaw;

/* SignDoc is the type used for generating sign bytes for SIGN_MODE_DIRECT. */
typedef struct _cosmos_tx_v1beta1_SignDoc {
    /* body_bytes is protobuf serialization of a TxBody that matches the
 representation in TxRaw. */
    pb_callback_t body_bytes;
    /* auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
 representation in TxRaw. */
    pb_callback_t auth_info_bytes;
    /* chain_id is the unique identifier of the chain this transaction targets.
 It prevents signed transactions from being used on another chain by an
 attacker */
    pb_callback_t chain_id;
    /* account_number is the account number of the account in state */
    uint64_t account_number;
} cosmos_tx_v1beta1_SignDoc;

/* TxBody is the body of a transaction that all signers sign over. */
typedef struct _cosmos_tx_v1beta1_TxBody {
    /* messages is a list of messages to be executed. The required signers of
 those messages define the number and order of elements in AuthInfo's
 signer_infos and Tx's signatures. Each required signer address is added to
 the list only the first time it occurs.
 By convention, the first required signer (usually from the first message)
 is referred to as the primary signer and pays the fee for the whole
 transaction. */
    pb_callback_t messages;
    /* memo is any arbitrary note/comment to be added to the transaction.
 WARNING: in clients, any publicly exposed text should not be called memo,
 but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122). */
    pb_callback_t memo;
    /* timeout is the block height after which this transaction will not
 be processed by the chain */
    uint64_t timeout_height;
    /* extension_options are arbitrary options that can be added by chains
 when the default options are not sufficient. If any of these are present
 and can't be handled, the transaction will be rejected */
    pb_callback_t extension_options;
    /* extension_options are arbitrary options that can be added by chains
 when the default options are not sufficient. If any of these are present
 and can't be handled, they will be ignored */
    pb_callback_t non_critical_extension_options;
} cosmos_tx_v1beta1_TxBody;

/* Single is the mode info for a single signer. It is structured as a message
 to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
 future */
typedef struct _cosmos_tx_v1beta1_ModeInfo_Single {
    /* mode is the signing mode of the single signer */
    cosmos_tx_signing_v1beta1_SignMode mode;
} cosmos_tx_v1beta1_ModeInfo_Single;

/* Multi is the mode info for a multisig public key */
typedef struct _cosmos_tx_v1beta1_ModeInfo_Multi {
    /* bitarray specifies which keys within the multisig are signing */
    bool has_bitarray;
    cosmos_crypto_multisig_v1beta1_CompactBitArray bitarray;
    /* mode_infos is the corresponding modes of the signers of the multisig
 which could include nested multisig public keys */
    pb_callback_t mode_infos;
} cosmos_tx_v1beta1_ModeInfo_Multi;

/* ModeInfo describes the signing mode of a single or nested multisig signer. */
typedef struct _cosmos_tx_v1beta1_ModeInfo {
    pb_size_t which_sum;
    union {
        /* single represents a single signer */
        cosmos_tx_v1beta1_ModeInfo_Single single;
        /* multi represents a nested multisig signer */
        cosmos_tx_v1beta1_ModeInfo_Multi multi;
    } sum;
} cosmos_tx_v1beta1_ModeInfo;

/* SignerInfo describes the public key and signing mode of a single top-level
 signer. */
typedef struct _cosmos_tx_v1beta1_SignerInfo {
    /* public_key is the public key of the signer. It is optional for accounts
 that already exist in state. If unset, the verifier can use the required \
 signer address for this position and lookup the public key. */
    bool has_public_key;
    google_protobuf_Any public_key;
    /* mode_info describes the signing mode of the signer and is a nested
 structure to support nested multisig pubkey's */
    bool has_mode_info;
    cosmos_tx_v1beta1_ModeInfo mode_info;
    /* sequence is the sequence of the account, which describes the
 number of committed transactions signed by a given address. It is used to
 prevent replay attacks. */
    uint64_t sequence;
} cosmos_tx_v1beta1_SignerInfo;

/* Fee includes the amount of coins paid in fees and the maximum
 gas to be used by the transaction. The ratio yields an effective "gasprice",
 which must be above some miminum to be accepted into the mempool. */
typedef struct _cosmos_tx_v1beta1_Fee {
    /* amount is the amount of coins to be paid as a fee */
    pb_callback_t amount;
    /* gas_limit is the maximum gas that can be used in transaction processing
 before an out of gas error occurs */
    uint64_t gas_limit;
    /* if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.
 the payer must be a tx signer (and thus have signed this field in AuthInfo).
 setting this field does *not* change the ordering of required signers for the transaction. */
    pb_callback_t payer;
    /* if set, the fee payer (either the first signer or the value of the payer field) requests that a fee grant be used
 to pay fees instead of the fee payer's own balance. If an appropriate fee grant does not exist or the chain does
 not support fee grants, this will fail */
    pb_callback_t granter;
} cosmos_tx_v1beta1_Fee;

/* Tip is the tip used for meta-transactions.

 Since: cosmos-sdk 0.46 */
typedef struct _cosmos_tx_v1beta1_Tip {
    /* amount is the amount of the tip */
    pb_callback_t amount;
    /* tipper is the address of the account paying for the tip */
    pb_callback_t tipper;
} cosmos_tx_v1beta1_Tip;

/* SignDocDirectAux is the type used for generating sign bytes for
 SIGN_MODE_DIRECT_AUX.

 Since: cosmos-sdk 0.46 */
typedef struct _cosmos_tx_v1beta1_SignDocDirectAux {
    /* body_bytes is protobuf serialization of a TxBody that matches the
 representation in TxRaw. */
    pb_callback_t body_bytes;
    /* public_key is the public key of the signing account. */
    bool has_public_key;
    google_protobuf_Any public_key;
    /* chain_id is the identifier of the chain this transaction targets.
 It prevents signed transactions from being used on another chain by an
 attacker. */
    pb_callback_t chain_id;
    /* account_number is the account number of the account in state. */
    uint64_t account_number;
    /* sequence is the sequence number of the signing account. */
    uint64_t sequence;
    /* Tip is the optional tip used for transactions fees paid in another denom.
 It should be left empty if the signer is not the tipper for this
 transaction.

 This field is ignored if the chain didn't enable tips, i.e. didn't add the
 `TipDecorator` in its posthandler. */
    bool has_tip;
    cosmos_tx_v1beta1_Tip tip;
} cosmos_tx_v1beta1_SignDocDirectAux;

/* AuthInfo describes the fee and signer modes that are used to sign a
 transaction. */
typedef struct _cosmos_tx_v1beta1_AuthInfo {
    /* signer_infos defines the signing modes for the required signers. The number
 and order of elements must match the required signers from TxBody's
 messages. The first element is the primary signer and the one which pays
 the fee. */
    pb_callback_t signer_infos;
    /* Fee is the fee and gas limit for the transaction. The first signer is the
 primary signer and the one which pays the fee. The fee can be calculated
 based on the cost of evaluating the body and doing signature verification
 of the signers. This can be estimated via simulation. */
    bool has_fee;
    cosmos_tx_v1beta1_Fee fee;
    /* Tip is the optional tip used for transactions fees paid in another denom.

 This field is ignored if the chain didn't enable tips, i.e. didn't add the
 `TipDecorator` in its posthandler.

 Since: cosmos-sdk 0.46 */
    bool has_tip;
    cosmos_tx_v1beta1_Tip tip;
} cosmos_tx_v1beta1_AuthInfo;

/* Tx is the standard type used for broadcasting transactions. */
typedef struct _cosmos_tx_v1beta1_Tx {
    /* body is the processable content of the transaction */
    bool has_body;
    cosmos_tx_v1beta1_TxBody body;
    /* auth_info is the authorization related content of the transaction,
 specifically signers, signer modes and fee */
    bool has_auth_info;
    cosmos_tx_v1beta1_AuthInfo auth_info;
    /* signatures is a list of signatures that matches the length and order of
 AuthInfo's signer_infos to allow connecting signature meta information like
 public key and signing mode by position. */
    pb_callback_t signatures;
} cosmos_tx_v1beta1_Tx;

/* AuxSignerData is the intermediary format that an auxiliary signer (e.g. a
 tipper) builds and sends to the fee payer (who will build and broadcast the
 actual tx). AuxSignerData is not a valid tx in itself, and will be rejected
 by the node if sent directly as-is.

 Since: cosmos-sdk 0.46 */
typedef struct _cosmos_tx_v1beta1_AuxSignerData {
    /* address is the bech32-encoded address of the auxiliary signer. If using
 AuxSignerData across different chains, the bech32 prefix of the target
 chain (where the final transaction is broadcasted) should be used. */
    pb_callback_t address;
    /* sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
 signs. Note: we use the same sign doc even if we're signing with
 LEGACY_AMINO_JSON. */
    bool has_sign_doc;
    cosmos_tx_v1beta1_SignDocDirectAux sign_doc;
    /* mode is the signing mode of the single signer. */
    cosmos_tx_signing_v1beta1_SignMode mode;
    /* sig is the signature of the sign doc. */
    pb_callback_t sig;
} cosmos_tx_v1beta1_AuxSignerData;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define cosmos_tx_v1beta1_Tx_init_default        {false, cosmos_tx_v1beta1_TxBody_init_default, false, cosmos_tx_v1beta1_AuthInfo_init_default, {{NULL}, NULL}}
#define cosmos_tx_v1beta1_TxRaw_init_default     {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define cosmos_tx_v1beta1_SignDoc_init_default   {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define cosmos_tx_v1beta1_SignDocDirectAux_init_default {{{NULL}, NULL}, false, google_protobuf_Any_init_default, {{NULL}, NULL}, 0, 0, false, cosmos_tx_v1beta1_Tip_init_default}
#define cosmos_tx_v1beta1_TxBody_init_default    {{{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define cosmos_tx_v1beta1_AuthInfo_init_default  {{{NULL}, NULL}, false, cosmos_tx_v1beta1_Fee_init_default, false, cosmos_tx_v1beta1_Tip_init_default}
#define cosmos_tx_v1beta1_SignerInfo_init_default {false, google_protobuf_Any_init_default, false, cosmos_tx_v1beta1_ModeInfo_init_default, 0}
#define cosmos_tx_v1beta1_ModeInfo_init_default  {0, {cosmos_tx_v1beta1_ModeInfo_Single_init_default}}
#define cosmos_tx_v1beta1_ModeInfo_Single_init_default {_cosmos_tx_signing_v1beta1_SignMode_MIN}
#define cosmos_tx_v1beta1_ModeInfo_Multi_init_default {false, cosmos_crypto_multisig_v1beta1_CompactBitArray_init_default, {{NULL}, NULL}}
#define cosmos_tx_v1beta1_Fee_init_default       {{{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define cosmos_tx_v1beta1_Tip_init_default       {{{NULL}, NULL}, {{NULL}, NULL}}
#define cosmos_tx_v1beta1_AuxSignerData_init_default {{{NULL}, NULL}, false, cosmos_tx_v1beta1_SignDocDirectAux_init_default, _cosmos_tx_signing_v1beta1_SignMode_MIN, {{NULL}, NULL}}
#define cosmos_tx_v1beta1_Tx_init_zero           {false, cosmos_tx_v1beta1_TxBody_init_zero, false, cosmos_tx_v1beta1_AuthInfo_init_zero, {{NULL}, NULL}}
#define cosmos_tx_v1beta1_TxRaw_init_zero        {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define cosmos_tx_v1beta1_SignDoc_init_zero      {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define cosmos_tx_v1beta1_SignDocDirectAux_init_zero {{{NULL}, NULL}, false, google_protobuf_Any_init_zero, {{NULL}, NULL}, 0, 0, false, cosmos_tx_v1beta1_Tip_init_zero}
#define cosmos_tx_v1beta1_TxBody_init_zero       {{{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define cosmos_tx_v1beta1_AuthInfo_init_zero     {{{NULL}, NULL}, false, cosmos_tx_v1beta1_Fee_init_zero, false, cosmos_tx_v1beta1_Tip_init_zero}
#define cosmos_tx_v1beta1_SignerInfo_init_zero   {false, google_protobuf_Any_init_zero, false, cosmos_tx_v1beta1_ModeInfo_init_zero, 0}
#define cosmos_tx_v1beta1_ModeInfo_init_zero     {0, {cosmos_tx_v1beta1_ModeInfo_Single_init_zero}}
#define cosmos_tx_v1beta1_ModeInfo_Single_init_zero {_cosmos_tx_signing_v1beta1_SignMode_MIN}
#define cosmos_tx_v1beta1_ModeInfo_Multi_init_zero {false, cosmos_crypto_multisig_v1beta1_CompactBitArray_init_zero, {{NULL}, NULL}}
#define cosmos_tx_v1beta1_Fee_init_zero          {{{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define cosmos_tx_v1beta1_Tip_init_zero          {{{NULL}, NULL}, {{NULL}, NULL}}
#define cosmos_tx_v1beta1_AuxSignerData_init_zero {{{NULL}, NULL}, false, cosmos_tx_v1beta1_SignDocDirectAux_init_zero, _cosmos_tx_signing_v1beta1_SignMode_MIN, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define cosmos_tx_v1beta1_TxRaw_body_bytes_tag   1
#define cosmos_tx_v1beta1_TxRaw_auth_info_bytes_tag 2
#define cosmos_tx_v1beta1_TxRaw_signatures_tag   3
#define cosmos_tx_v1beta1_SignDoc_body_bytes_tag 1
#define cosmos_tx_v1beta1_SignDoc_auth_info_bytes_tag 2
#define cosmos_tx_v1beta1_SignDoc_chain_id_tag   3
#define cosmos_tx_v1beta1_SignDoc_account_number_tag 4
#define cosmos_tx_v1beta1_TxBody_messages_tag    1
#define cosmos_tx_v1beta1_TxBody_memo_tag        2
#define cosmos_tx_v1beta1_TxBody_timeout_height_tag 3
#define cosmos_tx_v1beta1_TxBody_extension_options_tag 1023
#define cosmos_tx_v1beta1_TxBody_non_critical_extension_options_tag 2047
#define cosmos_tx_v1beta1_ModeInfo_Single_mode_tag 1
#define cosmos_tx_v1beta1_ModeInfo_Multi_bitarray_tag 1
#define cosmos_tx_v1beta1_ModeInfo_Multi_mode_infos_tag 2
#define cosmos_tx_v1beta1_ModeInfo_single_tag    1
#define cosmos_tx_v1beta1_ModeInfo_multi_tag     2
#define cosmos_tx_v1beta1_SignerInfo_public_key_tag 1
#define cosmos_tx_v1beta1_SignerInfo_mode_info_tag 2
#define cosmos_tx_v1beta1_SignerInfo_sequence_tag 3
#define cosmos_tx_v1beta1_Fee_amount_tag         1
#define cosmos_tx_v1beta1_Fee_gas_limit_tag      2
#define cosmos_tx_v1beta1_Fee_payer_tag          3
#define cosmos_tx_v1beta1_Fee_granter_tag        4
#define cosmos_tx_v1beta1_Tip_amount_tag         1
#define cosmos_tx_v1beta1_Tip_tipper_tag         2
#define cosmos_tx_v1beta1_SignDocDirectAux_body_bytes_tag 1
#define cosmos_tx_v1beta1_SignDocDirectAux_public_key_tag 2
#define cosmos_tx_v1beta1_SignDocDirectAux_chain_id_tag 3
#define cosmos_tx_v1beta1_SignDocDirectAux_account_number_tag 4
#define cosmos_tx_v1beta1_SignDocDirectAux_sequence_tag 5
#define cosmos_tx_v1beta1_SignDocDirectAux_tip_tag 6
#define cosmos_tx_v1beta1_AuthInfo_signer_infos_tag 1
#define cosmos_tx_v1beta1_AuthInfo_fee_tag       2
#define cosmos_tx_v1beta1_AuthInfo_tip_tag       3
#define cosmos_tx_v1beta1_Tx_body_tag            1
#define cosmos_tx_v1beta1_Tx_auth_info_tag       2
#define cosmos_tx_v1beta1_Tx_signatures_tag      3
#define cosmos_tx_v1beta1_AuxSignerData_address_tag 1
#define cosmos_tx_v1beta1_AuxSignerData_sign_doc_tag 2
#define cosmos_tx_v1beta1_AuxSignerData_mode_tag 3
#define cosmos_tx_v1beta1_AuxSignerData_sig_tag  4

/* Struct field encoding specification for nanopb */
#define cosmos_tx_v1beta1_Tx_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  body,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  auth_info,         2) \
X(a, CALLBACK, REPEATED, BYTES,    signatures,        3)
#define cosmos_tx_v1beta1_Tx_CALLBACK pb_default_field_callback
#define cosmos_tx_v1beta1_Tx_DEFAULT NULL
#define cosmos_tx_v1beta1_Tx_body_MSGTYPE cosmos_tx_v1beta1_TxBody
#define cosmos_tx_v1beta1_Tx_auth_info_MSGTYPE cosmos_tx_v1beta1_AuthInfo

#define cosmos_tx_v1beta1_TxRaw_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    body_bytes,        1) \
X(a, CALLBACK, SINGULAR, BYTES,    auth_info_bytes,   2) \
X(a, CALLBACK, REPEATED, BYTES,    signatures,        3)
#define cosmos_tx_v1beta1_TxRaw_CALLBACK pb_default_field_callback
#define cosmos_tx_v1beta1_TxRaw_DEFAULT NULL

#define cosmos_tx_v1beta1_SignDoc_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    body_bytes,        1) \
X(a, CALLBACK, SINGULAR, BYTES,    auth_info_bytes,   2) \
X(a, CALLBACK, SINGULAR, STRING,   chain_id,          3) \
X(a, STATIC,   SINGULAR, UINT64,   account_number,    4)
#define cosmos_tx_v1beta1_SignDoc_CALLBACK pb_default_field_callback
#define cosmos_tx_v1beta1_SignDoc_DEFAULT NULL

#define cosmos_tx_v1beta1_SignDocDirectAux_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    body_bytes,        1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  public_key,        2) \
X(a, CALLBACK, SINGULAR, STRING,   chain_id,          3) \
X(a, STATIC,   SINGULAR, UINT64,   account_number,    4) \
X(a, STATIC,   SINGULAR, UINT64,   sequence,          5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tip,               6)
#define cosmos_tx_v1beta1_SignDocDirectAux_CALLBACK pb_default_field_callback
#define cosmos_tx_v1beta1_SignDocDirectAux_DEFAULT NULL
#define cosmos_tx_v1beta1_SignDocDirectAux_public_key_MSGTYPE google_protobuf_Any
#define cosmos_tx_v1beta1_SignDocDirectAux_tip_MSGTYPE cosmos_tx_v1beta1_Tip

#define cosmos_tx_v1beta1_TxBody_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  messages,          1) \
X(a, CALLBACK, SINGULAR, STRING,   memo,              2) \
X(a, STATIC,   SINGULAR, UINT64,   timeout_height,    3) \
X(a, CALLBACK, REPEATED, MESSAGE,  extension_options, 1023) \
X(a, CALLBACK, REPEATED, MESSAGE,  non_critical_extension_options, 2047)
#define cosmos_tx_v1beta1_TxBody_CALLBACK pb_default_field_callback
#define cosmos_tx_v1beta1_TxBody_DEFAULT NULL
#define cosmos_tx_v1beta1_TxBody_messages_MSGTYPE google_protobuf_Any
#define cosmos_tx_v1beta1_TxBody_extension_options_MSGTYPE google_protobuf_Any
#define cosmos_tx_v1beta1_TxBody_non_critical_extension_options_MSGTYPE google_protobuf_Any

#define cosmos_tx_v1beta1_AuthInfo_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  signer_infos,      1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  fee,               2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tip,               3)
#define cosmos_tx_v1beta1_AuthInfo_CALLBACK pb_default_field_callback
#define cosmos_tx_v1beta1_AuthInfo_DEFAULT NULL
#define cosmos_tx_v1beta1_AuthInfo_signer_infos_MSGTYPE cosmos_tx_v1beta1_SignerInfo
#define cosmos_tx_v1beta1_AuthInfo_fee_MSGTYPE cosmos_tx_v1beta1_Fee
#define cosmos_tx_v1beta1_AuthInfo_tip_MSGTYPE cosmos_tx_v1beta1_Tip

#define cosmos_tx_v1beta1_SignerInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  public_key,        1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  mode_info,         2) \
X(a, STATIC,   SINGULAR, UINT64,   sequence,          3)
#define cosmos_tx_v1beta1_SignerInfo_CALLBACK NULL
#define cosmos_tx_v1beta1_SignerInfo_DEFAULT NULL
#define cosmos_tx_v1beta1_SignerInfo_public_key_MSGTYPE google_protobuf_Any
#define cosmos_tx_v1beta1_SignerInfo_mode_info_MSGTYPE cosmos_tx_v1beta1_ModeInfo

#define cosmos_tx_v1beta1_ModeInfo_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (sum,single,sum.single),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (sum,multi,sum.multi),   2)
#define cosmos_tx_v1beta1_ModeInfo_CALLBACK NULL
#define cosmos_tx_v1beta1_ModeInfo_DEFAULT NULL
#define cosmos_tx_v1beta1_ModeInfo_sum_single_MSGTYPE cosmos_tx_v1beta1_ModeInfo_Single
#define cosmos_tx_v1beta1_ModeInfo_sum_multi_MSGTYPE cosmos_tx_v1beta1_ModeInfo_Multi

#define cosmos_tx_v1beta1_ModeInfo_Single_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    mode,              1)
#define cosmos_tx_v1beta1_ModeInfo_Single_CALLBACK NULL
#define cosmos_tx_v1beta1_ModeInfo_Single_DEFAULT NULL

#define cosmos_tx_v1beta1_ModeInfo_Multi_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  bitarray,          1) \
X(a, CALLBACK, REPEATED, MESSAGE,  mode_infos,        2)
#define cosmos_tx_v1beta1_ModeInfo_Multi_CALLBACK pb_default_field_callback
#define cosmos_tx_v1beta1_ModeInfo_Multi_DEFAULT NULL
#define cosmos_tx_v1beta1_ModeInfo_Multi_bitarray_MSGTYPE cosmos_crypto_multisig_v1beta1_CompactBitArray
#define cosmos_tx_v1beta1_ModeInfo_Multi_mode_infos_MSGTYPE cosmos_tx_v1beta1_ModeInfo

#define cosmos_tx_v1beta1_Fee_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  amount,            1) \
X(a, STATIC,   SINGULAR, UINT64,   gas_limit,         2) \
X(a, CALLBACK, SINGULAR, STRING,   payer,             3) \
X(a, CALLBACK, SINGULAR, STRING,   granter,           4)
#define cosmos_tx_v1beta1_Fee_CALLBACK pb_default_field_callback
#define cosmos_tx_v1beta1_Fee_DEFAULT NULL
#define cosmos_tx_v1beta1_Fee_amount_MSGTYPE cosmos_base_v1beta1_Coin

#define cosmos_tx_v1beta1_Tip_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  amount,            1) \
X(a, CALLBACK, SINGULAR, STRING,   tipper,            2)
#define cosmos_tx_v1beta1_Tip_CALLBACK pb_default_field_callback
#define cosmos_tx_v1beta1_Tip_DEFAULT NULL
#define cosmos_tx_v1beta1_Tip_amount_MSGTYPE cosmos_base_v1beta1_Coin

#define cosmos_tx_v1beta1_AuxSignerData_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   address,           1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  sign_doc,          2) \
X(a, STATIC,   SINGULAR, UENUM,    mode,              3) \
X(a, CALLBACK, SINGULAR, BYTES,    sig,               4)
#define cosmos_tx_v1beta1_AuxSignerData_CALLBACK pb_default_field_callback
#define cosmos_tx_v1beta1_AuxSignerData_DEFAULT NULL
#define cosmos_tx_v1beta1_AuxSignerData_sign_doc_MSGTYPE cosmos_tx_v1beta1_SignDocDirectAux

extern const pb_msgdesc_t cosmos_tx_v1beta1_Tx_msg;
extern const pb_msgdesc_t cosmos_tx_v1beta1_TxRaw_msg;
extern const pb_msgdesc_t cosmos_tx_v1beta1_SignDoc_msg;
extern const pb_msgdesc_t cosmos_tx_v1beta1_SignDocDirectAux_msg;
extern const pb_msgdesc_t cosmos_tx_v1beta1_TxBody_msg;
extern const pb_msgdesc_t cosmos_tx_v1beta1_AuthInfo_msg;
extern const pb_msgdesc_t cosmos_tx_v1beta1_SignerInfo_msg;
extern const pb_msgdesc_t cosmos_tx_v1beta1_ModeInfo_msg;
extern const pb_msgdesc_t cosmos_tx_v1beta1_ModeInfo_Single_msg;
extern const pb_msgdesc_t cosmos_tx_v1beta1_ModeInfo_Multi_msg;
extern const pb_msgdesc_t cosmos_tx_v1beta1_Fee_msg;
extern const pb_msgdesc_t cosmos_tx_v1beta1_Tip_msg;
extern const pb_msgdesc_t cosmos_tx_v1beta1_AuxSignerData_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define cosmos_tx_v1beta1_Tx_fields &cosmos_tx_v1beta1_Tx_msg
#define cosmos_tx_v1beta1_TxRaw_fields &cosmos_tx_v1beta1_TxRaw_msg
#define cosmos_tx_v1beta1_SignDoc_fields &cosmos_tx_v1beta1_SignDoc_msg
#define cosmos_tx_v1beta1_SignDocDirectAux_fields &cosmos_tx_v1beta1_SignDocDirectAux_msg
#define cosmos_tx_v1beta1_TxBody_fields &cosmos_tx_v1beta1_TxBody_msg
#define cosmos_tx_v1beta1_AuthInfo_fields &cosmos_tx_v1beta1_AuthInfo_msg
#define cosmos_tx_v1beta1_SignerInfo_fields &cosmos_tx_v1beta1_SignerInfo_msg
#define cosmos_tx_v1beta1_ModeInfo_fields &cosmos_tx_v1beta1_ModeInfo_msg
#define cosmos_tx_v1beta1_ModeInfo_Single_fields &cosmos_tx_v1beta1_ModeInfo_Single_msg
#define cosmos_tx_v1beta1_ModeInfo_Multi_fields &cosmos_tx_v1beta1_ModeInfo_Multi_msg
#define cosmos_tx_v1beta1_Fee_fields &cosmos_tx_v1beta1_Fee_msg
#define cosmos_tx_v1beta1_Tip_fields &cosmos_tx_v1beta1_Tip_msg
#define cosmos_tx_v1beta1_AuxSignerData_fields &cosmos_tx_v1beta1_AuxSignerData_msg

/* Maximum encoded size of messages (where known) */
/* cosmos_tx_v1beta1_Tx_size depends on runtime parameters */
/* cosmos_tx_v1beta1_TxRaw_size depends on runtime parameters */
/* cosmos_tx_v1beta1_SignDoc_size depends on runtime parameters */
/* cosmos_tx_v1beta1_SignDocDirectAux_size depends on runtime parameters */
/* cosmos_tx_v1beta1_TxBody_size depends on runtime parameters */
/* cosmos_tx_v1beta1_AuthInfo_size depends on runtime parameters */
/* cosmos_tx_v1beta1_SignerInfo_size depends on runtime parameters */
/* cosmos_tx_v1beta1_ModeInfo_size depends on runtime parameters */
/* cosmos_tx_v1beta1_ModeInfo_Multi_size depends on runtime parameters */
/* cosmos_tx_v1beta1_Fee_size depends on runtime parameters */
/* cosmos_tx_v1beta1_Tip_size depends on runtime parameters */
/* cosmos_tx_v1beta1_AuxSignerData_size depends on runtime parameters */
#define COSMOS_TX_V1BETA1_COSMOS_TX_V1BETA1_TX_PB_H_MAX_SIZE cosmos_tx_v1beta1_ModeInfo_Single_size
#define cosmos_tx_v1beta1_ModeInfo_Single_size   3

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
